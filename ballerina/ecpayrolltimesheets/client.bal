// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.org).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/data.jsondata;
import ballerina/http;
import ballerinax/sap;

# API to record employee attendances, overtime, on-call times, and allowances 
#
# You can find your company's API server in [List of API Servers in SAP SuccessFactors.](https://help.sap.com/viewer/d599f15995d348a1b45ba5603e2aba9b/LATEST/en-US/af2b8d5437494b12be88fe374eba75b6.html)
public isolated client class Client {
    final sap:Client clientEp;

    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string hostname, int port = 443) returns error? {
        string serviceUrl = string `${hostname}:${port}/successfactors/odata/v2`;
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # Get entities from EmployeeTimeSheet
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEmployeeTimeSheets(map<string|string[]> headers = {}, *ListEmployeeTimeSheetsQueries queries) returns Wrapper|error {
        string resourcePath = string `/EmployeeTimeSheet`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from EmployeeTimeSheet by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEmployeeTimeSheet(string externalCode, map<string|string[]> headers = {}, *GetEmployeeTimeSheetQueries queries) returns EmployeeTimeSheet_1|error {
        string resourcePath = string `/EmployeeTimeSheet('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from ExternalAllowance
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listExternalAllowances(map<string|string[]> headers = {}, *ListExternalAllowancesQueries queries) returns Wrapper_1|error {
        string resourcePath = string `/ExternalAllowance`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to ExternalAllowance
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createExternalAllowance(ExternalAllowance payload, map<string|string[]> headers = {}) returns CreatedExternalAllowance|error {
        string resourcePath = string `/ExternalAllowance`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from ExternalAllowance by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getExternalAllowance(string externalCode, map<string|string[]> headers = {}, *GetExternalAllowanceQueries queries) returns ExternalAllowance_1|error {
        string resourcePath = string `/ExternalAllowance('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in ExternalAllowance
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateExternalAllowance(string externalCode, ModifiedExternalAllowance payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/ExternalAllowance('${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from ExternalAllowance
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteExternalAllowance(string externalCode, DeleteExternalAllowanceHeaders headers = {}) returns error? {
        string resourcePath = string `/ExternalAllowance('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from TimeCollector
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listTimeCollectors(map<string|string[]> headers = {}, *ListTimeCollectorsQueries queries) returns Wrapper_2|error {
        string resourcePath = string `/TimeCollector`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from TimeCollector by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getTimeCollector(string externalCode, map<string|string[]> headers = {}, *GetTimeCollectorQueries queries) returns TimeCollector_1|error {
        string resourcePath = string `/TimeCollector('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from ExternalTimeRecord
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listExternalTimeRecords(map<string|string[]> headers = {}, *ListExternalTimeRecordsQueries queries) returns Wrapper_3|error {
        string resourcePath = string `/ExternalTimeRecord`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to ExternalTimeRecord
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createExternalTimeRecord(ExternalTimeRecord payload, map<string|string[]> headers = {}) returns CreatedExternalTimeRecord|error {
        string resourcePath = string `/ExternalTimeRecord`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from ExternalTimeRecord by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getExternalTimeRecord(string externalCode, map<string|string[]> headers = {}, *GetExternalTimeRecordQueries queries) returns ExternalTimeRecord_1|error {
        string resourcePath = string `/ExternalTimeRecord('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in ExternalTimeRecord
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateExternalTimeRecord(string externalCode, ModifiedExternalTimeRecord payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/ExternalTimeRecord('${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from ExternalTimeRecord
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteExternalTimeRecord(string externalCode, DeleteExternalTimeRecordHeaders headers = {}) returns error? {
        string resourcePath = string `/ExternalTimeRecord('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from ExternalTimeData
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listExternalTimeData(map<string|string[]> headers = {}, *ListExternalTimeDataQueries queries) returns Wrapper_4|error {
        string resourcePath = string `/ExternalTimeData`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to ExternalTimeData
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createExternalTimeData(ExternalTimeData payload, map<string|string[]> headers = {}) returns CreatedExternalTimeData|error {
        string resourcePath = string `/ExternalTimeData`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from ExternalTimeData by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getExternalTimeData(string externalCode, map<string|string[]> headers = {}, *GetExternalTimeDataQueries queries) returns ExternalTimeData_1|error {
        string resourcePath = string `/ExternalTimeData('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in ExternalTimeData
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateExternalTimeData(string externalCode, ModifiedExternalTimeData payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/ExternalTimeData('${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from ExternalTimeData
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteExternalTimeData(string externalCode, DeleteExternalTimeDataHeaders headers = {}) returns error? {
        string resourcePath = string `/ExternalTimeData('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from DataReplicationProxy
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listDataReplicationProxies(map<string|string[]> headers = {}, *ListDataReplicationProxiesQueries queries) returns Wrapper_5|error {
        string resourcePath = string `/DataReplicationProxy`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from DataReplicationProxy by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getDataReplicationProxy(string externalCode, map<string|string[]> headers = {}, *GetDataReplicationProxyQueries queries) returns DataReplicationProxy_1|error {
        string resourcePath = string `/DataReplicationProxy('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from EmployeeTimeSheetEntry
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEmployeeTimeSheetEntries(map<string|string[]> headers = {}, *ListEmployeeTimeSheetEntriesQueries queries) returns Wrapper_6|error {
        string resourcePath = string `/EmployeeTimeSheetEntry`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from EmployeeTimeSheetEntry by key
    #
    # + EmployeeTimeSheet_externalCode - key: EmployeeTimeSheet_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEmployeeTimeSheetEntry(string EmployeeTimeSheet_externalCode, string externalCode, map<string|string[]> headers = {}, *GetEmployeeTimeSheetEntryQueries queries) returns EmployeeTimeSheetEntry_1|error {
        string resourcePath = string `/EmployeeTimeSheetEntry(EmployeeTimeSheet_externalCode='${getEncodedUri(EmployeeTimeSheet_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from EmployeeTimeValuationResult
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEmployeeTimeValuationResults(map<string|string[]> headers = {}, *ListEmployeeTimeValuationResultsQueries queries) returns Wrapper_7|error {
        string resourcePath = string `/EmployeeTimeValuationResult`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from EmployeeTimeValuationResult by key
    #
    # + EmployeeTimeSheet_externalCode - key: EmployeeTimeSheet_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEmployeeTimeValuationResult(string EmployeeTimeSheet_externalCode, string externalCode, map<string|string[]> headers = {}, *GetEmployeeTimeValuationResultQueries queries) returns EmployeeTimeValuationResult_1|error {
        string resourcePath = string `/EmployeeTimeValuationResult(EmployeeTimeSheet_externalCode='${getEncodedUri(EmployeeTimeSheet_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from AllowanceRecording
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listAllowanceRecordings(map<string|string[]> headers = {}, *ListAllowanceRecordingsQueries queries) returns Wrapper_8|error {
        string resourcePath = string `/AllowanceRecording`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from AllowanceRecording by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getAllowanceRecording(string externalCode, map<string|string[]> headers = {}, *GetAllowanceRecordingQueries queries) returns AllowanceRecording_1|error {
        string resourcePath = string `/AllowanceRecording('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from AvailableAllowanceType
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listAvailableAllowanceTypes(map<string|string[]> headers = {}, *ListAvailableAllowanceTypesQueries queries) returns Wrapper_9|error {
        string resourcePath = string `/AvailableAllowanceType`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from AvailableAllowanceType by key
    #
    # + TimeTypeProfile_externalCode - key: TimeTypeProfile_externalCode
    # + TimeTypeProfile_mdfSystemEffectiveStartDate - key: TimeTypeProfile_mdfSystemEffectiveStartDate
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getAvailableAllowanceType(string TimeTypeProfile_externalCode, string TimeTypeProfile_mdfSystemEffectiveStartDate, string externalCode, map<string|string[]> headers = {}, *GetAvailableAllowanceTypeQueries queries) returns AvailableAllowanceType|error {
        string resourcePath = string `/AvailableAllowanceType(TimeTypeProfile_externalCode='${getEncodedUri(TimeTypeProfile_externalCode)}',TimeTypeProfile_mdfSystemEffectiveStartDate=${getEncodedUri(TimeTypeProfile_mdfSystemEffectiveStartDate)},externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from ExternalTimeSegment
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listExternalTimeSegments(map<string|string[]> headers = {}, *ListExternalTimeSegmentsQueries queries) returns Wrapper_10|error {
        string resourcePath = string `/ExternalTimeSegment`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to ExternalTimeSegment
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createExternalTimeSegment(ExternalTimeSegment payload, map<string|string[]> headers = {}) returns CreatedExternalTimeSegment|error {
        string resourcePath = string `/ExternalTimeSegment`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from ExternalTimeSegment by key
    #
    # + ExternalTimeRecord_externalCode - key: ExternalTimeRecord_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getExternalTimeSegment(string ExternalTimeRecord_externalCode, string externalCode, map<string|string[]> headers = {}, *GetExternalTimeSegmentQueries queries) returns ExternalTimeSegment_1|error {
        string resourcePath = string `/ExternalTimeSegment(ExternalTimeRecord_externalCode='${getEncodedUri(ExternalTimeRecord_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in ExternalTimeSegment
    #
    # + ExternalTimeRecord_externalCode - key: ExternalTimeRecord_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateExternalTimeSegment(string ExternalTimeRecord_externalCode, string externalCode, ModifiedExternalTimeSegment payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/ExternalTimeSegment(ExternalTimeRecord_externalCode='${getEncodedUri(ExternalTimeRecord_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from ExternalTimeSegment
    #
    # + ExternalTimeRecord_externalCode - key: ExternalTimeRecord_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteExternalTimeSegment(string ExternalTimeRecord_externalCode, string externalCode, DeleteExternalTimeSegmentHeaders headers = {}) returns error? {
        string resourcePath = string `/ExternalTimeSegment(ExternalTimeRecord_externalCode='${getEncodedUri(ExternalTimeRecord_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from TimeRecording
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listTimeRecordings(map<string|string[]> headers = {}, *ListTimeRecordingsQueries queries) returns Wrapper_11|error {
        string resourcePath = string `/TimeRecording`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from TimeRecording by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getTimeRecording(string externalCode, map<string|string[]> headers = {}, *GetTimeRecordingQueries queries) returns TimeRecording_1|error {
        string resourcePath = string `/TimeRecording('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from Allowance
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listAllowances(map<string|string[]> headers = {}, *ListAllowancesQueries queries) returns Wrapper_12|error {
        string resourcePath = string `/Allowance`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from Allowance by key
    #
    # + EmployeeTimeSheet_externalCode - key: EmployeeTimeSheet_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getAllowance(string EmployeeTimeSheet_externalCode, string externalCode, map<string|string[]> headers = {}, *GetAllowanceQueries queries) returns Allowance_1|error {
        string resourcePath = string `/Allowance(EmployeeTimeSheet_externalCode='${getEncodedUri(EmployeeTimeSheet_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }
}
