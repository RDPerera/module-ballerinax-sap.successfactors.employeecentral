// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.org).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/data.jsondata;
import ballerina/http;
import ballerinax/sap;

# You can use these APIs to access the country specific global information of an employee.
#
# You can find your company's API server in [List of API Servers in SAP SuccessFactors.](https://help.sap.com/viewer/d599f15995d348a1b45ba5603e2aba9b/LATEST/en-US/af2b8d5437494b12be88fe374eba75b6.html)
public isolated client class Client {
    final sap:Client clientEp;

    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string hostname, int port = 443) returns error? {
        string serviceUrl = string `${hostname}:${port}/successfactors/odata/v2`;
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # Get entities from PerGlobalInfoARE
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPerGlobalInfoAREs(map<string|string[]> headers = {}, *ListPerGlobalInfoAREsQueries queries) returns Wrapper|error {
        string resourcePath = string `/PerGlobalInfoARE`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from PerGlobalInfoARE by key
    #
    # + country - key: country
    # + personIdExternal - key: personIdExternal
    # + startDate - key: startDate
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPerGlobalInfoARE(string country, string personIdExternal, string startDate, map<string|string[]> headers = {}, *GetPerGlobalInfoAREQueries queries) returns PerGlobalInfoARE_1|error {
        string resourcePath = string `/PerGlobalInfoARE(country='${getEncodedUri(country)}',personIdExternal='${getEncodedUri(personIdExternal)}',startDate=${getEncodedUri(startDate)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from PerGlobalInfoCHN
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPerGlobalInfoCHNs(map<string|string[]> headers = {}, *ListPerGlobalInfoCHNsQueries queries) returns Wrapper_1|error {
        string resourcePath = string `/PerGlobalInfoCHN`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from PerGlobalInfoCHN by key
    #
    # + country - key: country
    # + personIdExternal - key: personIdExternal
    # + startDate - key: startDate
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPerGlobalInfoCHN(string country, string personIdExternal, string startDate, map<string|string[]> headers = {}, *GetPerGlobalInfoCHNQueries queries) returns PerGlobalInfoCHN_1|error {
        string resourcePath = string `/PerGlobalInfoCHN(country='${getEncodedUri(country)}',personIdExternal='${getEncodedUri(personIdExternal)}',startDate=${getEncodedUri(startDate)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from PerGlobalInfoFIN
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPerGlobalInfoFINs(map<string|string[]> headers = {}, *ListPerGlobalInfoFINsQueries queries) returns Wrapper_2|error {
        string resourcePath = string `/PerGlobalInfoFIN`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from PerGlobalInfoFIN by key
    #
    # + country - key: country
    # + personIdExternal - key: personIdExternal
    # + startDate - key: startDate
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPerGlobalInfoFIN(string country, string personIdExternal, string startDate, map<string|string[]> headers = {}, *GetPerGlobalInfoFINQueries queries) returns PerGlobalInfoFIN_1|error {
        string resourcePath = string `/PerGlobalInfoFIN(country='${getEncodedUri(country)}',personIdExternal='${getEncodedUri(personIdExternal)}',startDate=${getEncodedUri(startDate)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from EducationDegreeContent
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEducationDegreeContents(map<string|string[]> headers = {}, *ListEducationDegreeContentsQueries queries) returns Wrapper_3|error {
        string resourcePath = string `/EducationDegreeContent`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to EducationDegreeContent
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createEducationDegreeContent(EducationDegreeContent payload, map<string|string[]> headers = {}) returns CreatedEducationDegreeContent|error {
        string resourcePath = string `/EducationDegreeContent`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from EducationDegreeContent by key
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEducationDegreeContent(string JobProfile_externalCode, string externalCode, map<string|string[]> headers = {}, *GetEducationDegreeContentQueries queries) returns EducationDegreeContent_1|error {
        string resourcePath = string `/EducationDegreeContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in EducationDegreeContent
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateEducationDegreeContent(string JobProfile_externalCode, string externalCode, ModifiedEducationDegreeContent payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/EducationDegreeContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from EducationDegreeContent
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteEducationDegreeContent(string JobProfile_externalCode, string externalCode, DeleteEducationDegreeContentHeaders headers = {}) returns error? {
        string resourcePath = string `/EducationDegreeContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from CurrencyExchangeRate
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listCurrencyExchangeRates(map<string|string[]> headers = {}, *ListCurrencyExchangeRatesQueries queries) returns Wrapper_4|error {
        string resourcePath = string `/CurrencyExchangeRate`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to CurrencyExchangeRate
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createCurrencyExchangeRate(CurrencyExchangeRate payload, map<string|string[]> headers = {}) returns CreatedCurrencyExchangeRate|error {
        string resourcePath = string `/CurrencyExchangeRate`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from CurrencyExchangeRate by key
    #
    # + effectiveStartDate - key: effectiveStartDate
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getCurrencyExchangeRate(string effectiveStartDate, string externalCode, map<string|string[]> headers = {}, *GetCurrencyExchangeRateQueries queries) returns CurrencyExchangeRate_1|error {
        string resourcePath = string `/CurrencyExchangeRate(effectiveStartDate=${getEncodedUri(effectiveStartDate)},externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in CurrencyExchangeRate
    #
    # + effectiveStartDate - key: effectiveStartDate
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateCurrencyExchangeRate(string effectiveStartDate, string externalCode, ModifiedCurrencyExchangeRate payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/CurrencyExchangeRate(effectiveStartDate=${getEncodedUri(effectiveStartDate)},externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from CurrencyExchangeRate
    #
    # + effectiveStartDate - key: effectiveStartDate
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteCurrencyExchangeRate(string effectiveStartDate, string externalCode, DeleteCurrencyExchangeRateHeaders headers = {}) returns error? {
        string resourcePath = string `/CurrencyExchangeRate(effectiveStartDate=${getEncodedUri(effectiveStartDate)},externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from NonRecurringPayment
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listNonRecurringPayments(map<string|string[]> headers = {}, *ListNonRecurringPaymentsQueries queries) returns Wrapper_5|error {
        string resourcePath = string `/NonRecurringPayment`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from NonRecurringPayment by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getNonRecurringPayment(string externalCode, map<string|string[]> headers = {}, *GetNonRecurringPaymentQueries queries) returns NonRecurringPayment_1|error {
        string resourcePath = string `/NonRecurringPayment('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from EducationDegreeEntity
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEducationDegreeEntities(map<string|string[]> headers = {}, *ListEducationDegreeEntitiesQueries queries) returns Wrapper_6|error {
        string resourcePath = string `/EducationDegreeEntity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to EducationDegreeEntity
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createEducationDegreeEntity(EducationDegreeEntity payload, map<string|string[]> headers = {}) returns CreatedEducationDegreeEntity|error {
        string resourcePath = string `/EducationDegreeEntity`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from EducationDegreeEntity by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEducationDegreeEntity(string externalCode, map<string|string[]> headers = {}, *GetEducationDegreeEntityQueries queries) returns EducationDegreeEntity_1|error {
        string resourcePath = string `/EducationDegreeEntity('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in EducationDegreeEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateEducationDegreeEntity(string externalCode, ModifiedEducationDegreeEntity payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/EducationDegreeEntity('${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from EducationDegreeEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteEducationDegreeEntity(string externalCode, DeleteEducationDegreeEntityHeaders headers = {}) returns error? {
        string resourcePath = string `/EducationDegreeEntity('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from ServiceDeskContactSupportInformation
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listServiceDeskContactSupportInformations(map<string|string[]> headers = {}, *ListServiceDeskContactSupportInformationsQueries queries) returns Wrapper_7|error {
        string resourcePath = string `/ServiceDeskContactSupportInformation`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to ServiceDeskContactSupportInformation
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createServiceDeskContactSupportInformation(ServiceDeskContactSupportInformation payload, map<string|string[]> headers = {}) returns CreatedServiceDeskContactSupportInformation|error {
        string resourcePath = string `/ServiceDeskContactSupportInformation`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from ServiceDeskContactSupportInformation by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getServiceDeskContactSupportInformation(int externalCode, map<string|string[]> headers = {}, *GetServiceDeskContactSupportInformationQueries queries) returns ServiceDeskContactSupportInformation_1|error {
        string resourcePath = string `/ServiceDeskContactSupportInformation(${getEncodedUri(externalCode)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in ServiceDeskContactSupportInformation
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateServiceDeskContactSupportInformation(int externalCode, ModifiedServiceDeskContactSupportInformation payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/ServiceDeskContactSupportInformation(${getEncodedUri(externalCode)})`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from ServiceDeskContactSupportInformation
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteServiceDeskContactSupportInformation(int externalCode, DeleteServiceDeskContactSupportInformationHeaders headers = {}) returns error? {
        string resourcePath = string `/ServiceDeskContactSupportInformation(${getEncodedUri(externalCode)})`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from PerGlobalInfoBRA
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPerGlobalInfoBRAs(map<string|string[]> headers = {}, *ListPerGlobalInfoBRAsQueries queries) returns Wrapper_8|error {
        string resourcePath = string `/PerGlobalInfoBRA`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from PerGlobalInfoBRA by key
    #
    # + country - key: country
    # + personIdExternal - key: personIdExternal
    # + startDate - key: startDate
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPerGlobalInfoBRA(string country, string personIdExternal, string startDate, map<string|string[]> headers = {}, *GetPerGlobalInfoBRAQueries queries) returns PerGlobalInfoBRA_1|error {
        string resourcePath = string `/PerGlobalInfoBRA(country='${getEncodedUri(country)}',personIdExternal='${getEncodedUri(personIdExternal)}',startDate=${getEncodedUri(startDate)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from PerGlobalInfoCHE
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPerGlobalInfoCHEs(map<string|string[]> headers = {}, *ListPerGlobalInfoCHEsQueries queries) returns Wrapper_9|error {
        string resourcePath = string `/PerGlobalInfoCHE`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from PerGlobalInfoCHE by key
    #
    # + country - key: country
    # + personIdExternal - key: personIdExternal
    # + startDate - key: startDate
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPerGlobalInfoCHE(string country, string personIdExternal, string startDate, map<string|string[]> headers = {}, *GetPerGlobalInfoCHEQueries queries) returns PerGlobalInfoCHE_1|error {
        string resourcePath = string `/PerGlobalInfoCHE(country='${getEncodedUri(country)}',personIdExternal='${getEncodedUri(personIdExternal)}',startDate=${getEncodedUri(startDate)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from PerGlobalInfoGBR
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPerGlobalInfoGBRs(map<string|string[]> headers = {}, *ListPerGlobalInfoGBRsQueries queries) returns Wrapper_10|error {
        string resourcePath = string `/PerGlobalInfoGBR`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from PerGlobalInfoGBR by key
    #
    # + country - key: country
    # + personIdExternal - key: personIdExternal
    # + startDate - key: startDate
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPerGlobalInfoGBR(string country, string personIdExternal, string startDate, map<string|string[]> headers = {}, *GetPerGlobalInfoGBRQueries queries) returns PerGlobalInfoGBR_1|error {
        string resourcePath = string `/PerGlobalInfoGBR(country='${getEncodedUri(country)}',personIdExternal='${getEncodedUri(personIdExternal)}',startDate=${getEncodedUri(startDate)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from PerGlobalInfoAUS
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPerGlobalInfoAUSs(map<string|string[]> headers = {}, *ListPerGlobalInfoAUSsQueries queries) returns Wrapper_11|error {
        string resourcePath = string `/PerGlobalInfoAUS`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from PerGlobalInfoAUS by key
    #
    # + country - key: country
    # + personIdExternal - key: personIdExternal
    # + startDate - key: startDate
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPerGlobalInfoAUS(string country, string personIdExternal, string startDate, map<string|string[]> headers = {}, *GetPerGlobalInfoAUSQueries queries) returns PerGlobalInfoAUS_1|error {
        string resourcePath = string `/PerGlobalInfoAUS(country='${getEncodedUri(country)}',personIdExternal='${getEncodedUri(personIdExternal)}',startDate=${getEncodedUri(startDate)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from PerGlobalInfoESP
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPerGlobalInfoESPs(map<string|string[]> headers = {}, *ListPerGlobalInfoESPsQueries queries) returns Wrapper_12|error {
        string resourcePath = string `/PerGlobalInfoESP`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from PerGlobalInfoESP by key
    #
    # + country - key: country
    # + personIdExternal - key: personIdExternal
    # + startDate - key: startDate
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPerGlobalInfoESP(string country, string personIdExternal, string startDate, map<string|string[]> headers = {}, *GetPerGlobalInfoESPQueries queries) returns PerGlobalInfoESP_1|error {
        string resourcePath = string `/PerGlobalInfoESP(country='${getEncodedUri(country)}',personIdExternal='${getEncodedUri(personIdExternal)}',startDate=${getEncodedUri(startDate)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from EducationMajorEntity
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEducationMajorEntities(map<string|string[]> headers = {}, *ListEducationMajorEntitiesQueries queries) returns Wrapper_13|error {
        string resourcePath = string `/EducationMajorEntity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to EducationMajorEntity
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createEducationMajorEntity(EducationMajorEntity payload, map<string|string[]> headers = {}) returns CreatedEducationMajorEntity|error {
        string resourcePath = string `/EducationMajorEntity`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from EducationMajorEntity by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEducationMajorEntity(string externalCode, map<string|string[]> headers = {}, *GetEducationMajorEntityQueries queries) returns EducationMajorEntity_1|error {
        string resourcePath = string `/EducationMajorEntity('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in EducationMajorEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateEducationMajorEntity(string externalCode, ModifiedEducationMajorEntity payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/EducationMajorEntity('${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from EducationMajorEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteEducationMajorEntity(string externalCode, DeleteEducationMajorEntityHeaders headers = {}) returns error? {
        string resourcePath = string `/EducationMajorEntity('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from PerGlobalInfoCAN
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPerGlobalInfoCANs(map<string|string[]> headers = {}, *ListPerGlobalInfoCANsQueries queries) returns Wrapper_14|error {
        string resourcePath = string `/PerGlobalInfoCAN`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from PerGlobalInfoCAN by key
    #
    # + country - key: country
    # + personIdExternal - key: personIdExternal
    # + startDate - key: startDate
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPerGlobalInfoCAN(string country, string personIdExternal, string startDate, map<string|string[]> headers = {}, *GetPerGlobalInfoCANQueries queries) returns PerGlobalInfoCAN_1|error {
        string resourcePath = string `/PerGlobalInfoCAN(country='${getEncodedUri(country)}',personIdExternal='${getEncodedUri(personIdExternal)}',startDate=${getEncodedUri(startDate)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from PerGlobalInfoUSA
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPerGlobalInfoUSAs(map<string|string[]> headers = {}, *ListPerGlobalInfoUSAsQueries queries) returns Wrapper_15|error {
        string resourcePath = string `/PerGlobalInfoUSA`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from PerGlobalInfoUSA by key
    #
    # + country - key: country
    # + personIdExternal - key: personIdExternal
    # + startDate - key: startDate
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPerGlobalInfoUSA(string country, string personIdExternal, string startDate, map<string|string[]> headers = {}, *GetPerGlobalInfoUSAQueries queries) returns PerGlobalInfoUSA_1|error {
        string resourcePath = string `/PerGlobalInfoUSA(country='${getEncodedUri(country)}',personIdExternal='${getEncodedUri(personIdExternal)}',startDate=${getEncodedUri(startDate)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from ServiceDeskCountrySupportInformation
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listServiceDeskCountrySupportInformations(map<string|string[]> headers = {}, *ListServiceDeskCountrySupportInformationsQueries queries) returns Wrapper_16|error {
        string resourcePath = string `/ServiceDeskCountrySupportInformation`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to ServiceDeskCountrySupportInformation
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createServiceDeskCountrySupportInformation(ServiceDeskCountrySupportInformation payload, map<string|string[]> headers = {}) returns CreatedServiceDeskCountrySupportInformation|error {
        string resourcePath = string `/ServiceDeskCountrySupportInformation`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from ServiceDeskCountrySupportInformation by key
    #
    # + ServiceDeskContactSupportInformation_externalCode - key: ServiceDeskContactSupportInformation_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getServiceDeskCountrySupportInformation(int ServiceDeskContactSupportInformation_externalCode, int externalCode, map<string|string[]> headers = {}, *GetServiceDeskCountrySupportInformationQueries queries) returns ServiceDeskCountrySupportInformation_1|error {
        string resourcePath = string `/ServiceDeskCountrySupportInformation(ServiceDeskContactSupportInformation_externalCode=${getEncodedUri(ServiceDeskContactSupportInformation_externalCode)},externalCode=${getEncodedUri(externalCode)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in ServiceDeskCountrySupportInformation
    #
    # + ServiceDeskContactSupportInformation_externalCode - key: ServiceDeskContactSupportInformation_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateServiceDeskCountrySupportInformation(int ServiceDeskContactSupportInformation_externalCode, int externalCode, ModifiedServiceDeskCountrySupportInformation payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/ServiceDeskCountrySupportInformation(ServiceDeskContactSupportInformation_externalCode=${getEncodedUri(ServiceDeskContactSupportInformation_externalCode)},externalCode=${getEncodedUri(externalCode)})`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from ServiceDeskCountrySupportInformation
    #
    # + ServiceDeskContactSupportInformation_externalCode - key: ServiceDeskContactSupportInformation_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteServiceDeskCountrySupportInformation(int ServiceDeskContactSupportInformation_externalCode, int externalCode, DeleteServiceDeskCountrySupportInformationHeaders headers = {}) returns error? {
        string resourcePath = string `/ServiceDeskCountrySupportInformation(ServiceDeskContactSupportInformation_externalCode=${getEncodedUri(ServiceDeskContactSupportInformation_externalCode)},externalCode=${getEncodedUri(externalCode)})`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from EducationMajorContent
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEducationMajorContents(map<string|string[]> headers = {}, *ListEducationMajorContentsQueries queries) returns Wrapper_17|error {
        string resourcePath = string `/EducationMajorContent`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to EducationMajorContent
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createEducationMajorContent(EducationMajorContent payload, map<string|string[]> headers = {}) returns CreatedEducationMajorContent|error {
        string resourcePath = string `/EducationMajorContent`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from EducationMajorContent by key
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEducationMajorContent(string JobProfile_externalCode, string externalCode, map<string|string[]> headers = {}, *GetEducationMajorContentQueries queries) returns EducationMajorContent_1|error {
        string resourcePath = string `/EducationMajorContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in EducationMajorContent
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateEducationMajorContent(string JobProfile_externalCode, string externalCode, ModifiedEducationMajorContent payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/EducationMajorContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from EducationMajorContent
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteEducationMajorContent(string JobProfile_externalCode, string externalCode, DeleteEducationMajorContentHeaders headers = {}) returns error? {
        string resourcePath = string `/EducationMajorContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from PerGlobalInfoFRA
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPerGlobalInfoFRAs(map<string|string[]> headers = {}, *ListPerGlobalInfoFRAsQueries queries) returns Wrapper_18|error {
        string resourcePath = string `/PerGlobalInfoFRA`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from PerGlobalInfoFRA by key
    #
    # + country - key: country
    # + personIdExternal - key: personIdExternal
    # + startDate - key: startDate
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPerGlobalInfoFRA(string country, string personIdExternal, string startDate, map<string|string[]> headers = {}, *GetPerGlobalInfoFRAQueries queries) returns PerGlobalInfoFRA_1|error {
        string resourcePath = string `/PerGlobalInfoFRA(country='${getEncodedUri(country)}',personIdExternal='${getEncodedUri(personIdExternal)}',startDate=${getEncodedUri(startDate)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from PerGlobalInfoDEU
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPerGlobalInfoDEUs(map<string|string[]> headers = {}, *ListPerGlobalInfoDEUsQueries queries) returns Wrapper_19|error {
        string resourcePath = string `/PerGlobalInfoDEU`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from PerGlobalInfoDEU by key
    #
    # + country - key: country
    # + personIdExternal - key: personIdExternal
    # + startDate - key: startDate
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPerGlobalInfoDEU(string country, string personIdExternal, string startDate, map<string|string[]> headers = {}, *GetPerGlobalInfoDEUQueries queries) returns PerGlobalInfoDEU_1|error {
        string resourcePath = string `/PerGlobalInfoDEU(country='${getEncodedUri(country)}',personIdExternal='${getEncodedUri(personIdExternal)}',startDate=${getEncodedUri(startDate)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from PerGlobalInfoDNK
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPerGlobalInfoDNKs(map<string|string[]> headers = {}, *ListPerGlobalInfoDNKsQueries queries) returns Wrapper_20|error {
        string resourcePath = string `/PerGlobalInfoDNK`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from PerGlobalInfoDNK by key
    #
    # + country - key: country
    # + personIdExternal - key: personIdExternal
    # + startDate - key: startDate
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPerGlobalInfoDNK(string country, string personIdExternal, string startDate, map<string|string[]> headers = {}, *GetPerGlobalInfoDNKQueries queries) returns PerGlobalInfoDNK_1|error {
        string resourcePath = string `/PerGlobalInfoDNK(country='${getEncodedUri(country)}',personIdExternal='${getEncodedUri(personIdExternal)}',startDate=${getEncodedUri(startDate)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from PerGlobalInfoITA
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPerGlobalInfoITAs(map<string|string[]> headers = {}, *ListPerGlobalInfoITAsQueries queries) returns Wrapper_21|error {
        string resourcePath = string `/PerGlobalInfoITA`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from PerGlobalInfoITA by key
    #
    # + country - key: country
    # + personIdExternal - key: personIdExternal
    # + startDate - key: startDate
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPerGlobalInfoITA(string country, string personIdExternal, string startDate, map<string|string[]> headers = {}, *GetPerGlobalInfoITAQueries queries) returns PerGlobalInfoITA_1|error {
        string resourcePath = string `/PerGlobalInfoITA(country='${getEncodedUri(country)}',personIdExternal='${getEncodedUri(personIdExternal)}',startDate=${getEncodedUri(startDate)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from PerGlobalInfoNLD
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPerGlobalInfoNLDs(map<string|string[]> headers = {}, *ListPerGlobalInfoNLDsQueries queries) returns Wrapper_22|error {
        string resourcePath = string `/PerGlobalInfoNLD`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from PerGlobalInfoNLD by key
    #
    # + country - key: country
    # + personIdExternal - key: personIdExternal
    # + startDate - key: startDate
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPerGlobalInfoNLD(string country, string personIdExternal, string startDate, map<string|string[]> headers = {}, *GetPerGlobalInfoNLDQueries queries) returns PerGlobalInfoNLD_1|error {
        string resourcePath = string `/PerGlobalInfoNLD(country='${getEncodedUri(country)}',personIdExternal='${getEncodedUri(personIdExternal)}',startDate=${getEncodedUri(startDate)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from PerGlobalInfoPRT
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPerGlobalInfoPRTs(map<string|string[]> headers = {}, *ListPerGlobalInfoPRTsQueries queries) returns Wrapper_23|error {
        string resourcePath = string `/PerGlobalInfoPRT`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from PerGlobalInfoPRT by key
    #
    # + country - key: country
    # + personIdExternal - key: personIdExternal
    # + startDate - key: startDate
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPerGlobalInfoPRT(string country, string personIdExternal, string startDate, map<string|string[]> headers = {}, *GetPerGlobalInfoPRTQueries queries) returns PerGlobalInfoPRT_1|error {
        string resourcePath = string `/PerGlobalInfoPRT(country='${getEncodedUri(country)}',personIdExternal='${getEncodedUri(personIdExternal)}',startDate=${getEncodedUri(startDate)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from PerGlobalInfoQAT
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPerGlobalInfoQATs(map<string|string[]> headers = {}, *ListPerGlobalInfoQATsQueries queries) returns Wrapper_24|error {
        string resourcePath = string `/PerGlobalInfoQAT`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from PerGlobalInfoQAT by key
    #
    # + country - key: country
    # + personIdExternal - key: personIdExternal
    # + startDate - key: startDate
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPerGlobalInfoQAT(string country, string personIdExternal, string startDate, map<string|string[]> headers = {}, *GetPerGlobalInfoQATQueries queries) returns PerGlobalInfoQAT_1|error {
        string resourcePath = string `/PerGlobalInfoQAT(country='${getEncodedUri(country)}',personIdExternal='${getEncodedUri(personIdExternal)}',startDate=${getEncodedUri(startDate)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from PerGlobalInfoSAU
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPerGlobalInfoSAUs(map<string|string[]> headers = {}, *ListPerGlobalInfoSAUsQueries queries) returns Wrapper_25|error {
        string resourcePath = string `/PerGlobalInfoSAU`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from PerGlobalInfoSAU by key
    #
    # + country - key: country
    # + personIdExternal - key: personIdExternal
    # + startDate - key: startDate
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPerGlobalInfoSAU(string country, string personIdExternal, string startDate, map<string|string[]> headers = {}, *GetPerGlobalInfoSAUQueries queries) returns PerGlobalInfoSAU_1|error {
        string resourcePath = string `/PerGlobalInfoSAU(country='${getEncodedUri(country)}',personIdExternal='${getEncodedUri(personIdExternal)}',startDate=${getEncodedUri(startDate)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from PerGlobalInfoZAF
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPerGlobalInfoZAFs(map<string|string[]> headers = {}, *ListPerGlobalInfoZAFsQueries queries) returns Wrapper_26|error {
        string resourcePath = string `/PerGlobalInfoZAF`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from PerGlobalInfoZAF by key
    #
    # + country - key: country
    # + personIdExternal - key: personIdExternal
    # + startDate - key: startDate
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPerGlobalInfoZAF(string country, string personIdExternal, string startDate, map<string|string[]> headers = {}, *GetPerGlobalInfoZAFQueries queries) returns PerGlobalInfoZAF_1|error {
        string resourcePath = string `/PerGlobalInfoZAF(country='${getEncodedUri(country)}',personIdExternal='${getEncodedUri(personIdExternal)}',startDate=${getEncodedUri(startDate)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Invoke function GetBizXAction
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function getGetBizXAction(map<string|string[]> headers = {}, *GetGetBizXActionQueries queries) returns Result|error {
        string resourcePath = string `/GetBizXAction`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }
}
