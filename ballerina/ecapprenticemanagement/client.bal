// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.org).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/data.jsondata;
import ballerina/http;
import ballerinax/sap;

# API to access apprentice management related data. 
#
# You can find your company's API server in [List of API Servers in SAP SuccessFactors.](https://help.sap.com/viewer/d599f15995d348a1b45ba5603e2aba9b/LATEST/en-US/af2b8d5437494b12be88fe374eba75b6.html)
public isolated client class Client {
    final sap:Client clientEp;

    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string hostname, int port = 443) returns error? {
        string serviceUrl = string `https://${hostname}:${port}/successfactors/odata/v2`;
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # Get entities from ApprenticeEventType
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listApprenticeEventTypes(map<string|string[]> headers = {}, *ListApprenticeEventTypesQueries queries) returns Wrapper|error {
        string resourcePath = string `/ApprenticeEventType`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to ApprenticeEventType
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createApprenticeEventType(ApprenticeEvent payload, map<string|string[]> headers = {}) returns Created\ ApprenticeEventType|error {
        string resourcePath = string `/ApprenticeEventType`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from ApprenticeEventType by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getApprenticeEventType(string externalCode, map<string|string[]> headers = {}, *GetApprenticeEventTypeQueries queries) returns ApprenticeEventType|error {
        string resourcePath = string `/ApprenticeEventType('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in ApprenticeEventType
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateApprenticeEventType(string externalCode, Modified\ ApprenticeEventType payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/ApprenticeEventType('${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from ApprenticeEventType
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteApprenticeEventType(string externalCode, DeleteApprenticeEventTypeHeaders headers = {}) returns error? {
        string resourcePath = string `/ApprenticeEventType('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from DepartmentApprenticeDetail
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listDepartmentApprenticeDetails(map<string|string[]> headers = {}, *ListDepartmentApprenticeDetailsQueries queries) returns Wrapper_1|error {
        string resourcePath = string `/DepartmentApprenticeDetail`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to DepartmentApprenticeDetail
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createDepartmentApprenticeDetail(DepartmentApprenticeDetail payload, map<string|string[]> headers = {}) returns Created\ DepartmentApprenticeDetail|error {
        string resourcePath = string `/DepartmentApprenticeDetail`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from DepartmentApprenticeDetail by key
    #
    # + Department_effectiveStartDate - key: Department_effectiveStartDate
    # + Department_externalCode - key: Department_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getDepartmentApprenticeDetail(string Department_effectiveStartDate, string Department_externalCode, int externalCode, map<string|string[]> headers = {}, *GetDepartmentApprenticeDetailQueries queries) returns DepartmentApprenticeDetail_1|error {
        string resourcePath = string `/DepartmentApprenticeDetail(Department_effectiveStartDate=${getEncodedUri(Department_effectiveStartDate)},Department_externalCode='${getEncodedUri(Department_externalCode)}',externalCode=${getEncodedUri(externalCode)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in DepartmentApprenticeDetail
    #
    # + Department_effectiveStartDate - key: Department_effectiveStartDate
    # + Department_externalCode - key: Department_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateDepartmentApprenticeDetail(string Department_effectiveStartDate, string Department_externalCode, int externalCode, Modified\ DepartmentApprenticeDetail payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/DepartmentApprenticeDetail(Department_effectiveStartDate=${getEncodedUri(Department_effectiveStartDate)},Department_externalCode='${getEncodedUri(Department_externalCode)}',externalCode=${getEncodedUri(externalCode)})`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from DepartmentApprenticeDetail
    #
    # + Department_effectiveStartDate - key: Department_effectiveStartDate
    # + Department_externalCode - key: Department_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteDepartmentApprenticeDetail(string Department_effectiveStartDate, string Department_externalCode, int externalCode, DeleteDepartmentApprenticeDetailHeaders headers = {}) returns error? {
        string resourcePath = string `/DepartmentApprenticeDetail(Department_effectiveStartDate=${getEncodedUri(Department_effectiveStartDate)},Department_externalCode='${getEncodedUri(Department_externalCode)}',externalCode=${getEncodedUri(externalCode)})`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from ApprenticeSchool
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listApprenticeSchools(map<string|string[]> headers = {}, *ListApprenticeSchoolsQueries queries) returns Wrapper_2|error {
        string resourcePath = string `/ApprenticeSchool`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to ApprenticeSchool
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createApprenticeSchool(ApprenticeSchool payload, map<string|string[]> headers = {}) returns Created\ ApprenticeSchool|error {
        string resourcePath = string `/ApprenticeSchool`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from ApprenticeSchool by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getApprenticeSchool(string externalCode, map<string|string[]> headers = {}, *GetApprenticeSchoolQueries queries) returns ApprenticeSchool_1|error {
        string resourcePath = string `/ApprenticeSchool('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in ApprenticeSchool
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateApprenticeSchool(string externalCode, Modified\ ApprenticeSchool payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/ApprenticeSchool('${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from ApprenticeSchool
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteApprenticeSchool(string externalCode, DeleteApprenticeSchoolHeaders headers = {}) returns error? {
        string resourcePath = string `/ApprenticeSchool('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from ApprenticeGroup
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listApprenticeGroups(map<string|string[]> headers = {}, *ListApprenticeGroupsQueries queries) returns Wrapper_3|error {
        string resourcePath = string `/ApprenticeGroup`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to ApprenticeGroup
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createApprenticeGroup(ApprenticeGroup payload, map<string|string[]> headers = {}) returns Created\ ApprenticeGroup|error {
        string resourcePath = string `/ApprenticeGroup`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from ApprenticeGroup by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getApprenticeGroup(string externalCode, map<string|string[]> headers = {}, *GetApprenticeGroupQueries queries) returns ApprenticeGroup_1|error {
        string resourcePath = string `/ApprenticeGroup('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in ApprenticeGroup
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateApprenticeGroup(string externalCode, Modified\ ApprenticeGroup payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/ApprenticeGroup('${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from ApprenticeGroup
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteApprenticeGroup(string externalCode, DeleteApprenticeGroupHeaders headers = {}) returns error? {
        string resourcePath = string `/ApprenticeGroup('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from ApprenticeSchoolEvent
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listApprenticeSchoolEvents(map<string|string[]> headers = {}, *ListApprenticeSchoolEventsQueries queries) returns Wrapper_4|error {
        string resourcePath = string `/ApprenticeSchoolEvent`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to ApprenticeSchoolEvent
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createApprenticeSchoolEvent(ApprenticeSchoolEvent payload, map<string|string[]> headers = {}) returns Created\ ApprenticeSchoolEvent|error {
        string resourcePath = string `/ApprenticeSchoolEvent`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from ApprenticeSchoolEvent by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getApprenticeSchoolEvent(string externalCode, map<string|string[]> headers = {}, *GetApprenticeSchoolEventQueries queries) returns ApprenticeSchoolEvent_1|error {
        string resourcePath = string `/ApprenticeSchoolEvent('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in ApprenticeSchoolEvent
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateApprenticeSchoolEvent(string externalCode, Modified\ ApprenticeSchoolEvent payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/ApprenticeSchoolEvent('${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from ApprenticeSchoolEvent
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteApprenticeSchoolEvent(string externalCode, DeleteApprenticeSchoolEventHeaders headers = {}) returns error? {
        string resourcePath = string `/ApprenticeSchoolEvent('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from ApprenticePracticalTrainingEvent
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listApprenticePracticalTrainingEvents(map<string|string[]> headers = {}, *ListApprenticePracticalTrainingEventsQueries queries) returns json|error {
        string resourcePath = string `/ApprenticePracticalTrainingEvent`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from ApprenticePracticalTrainingEvent by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getApprenticePracticalTrainingEvent(string externalCode, map<string|string[]> headers = {}, *GetApprenticePracticalTrainingEventQueries queries) returns json|error {
        string resourcePath = string `/ApprenticePracticalTrainingEvent('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Delete entity from ApprenticePracticalTrainingEvent
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteApprenticePracticalTrainingEvent(string externalCode, DeleteApprenticePracticalTrainingEventHeaders headers = {}) returns error? {
        string resourcePath = string `/ApprenticePracticalTrainingEvent('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from ApprenticeInternalTrainingEvent
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listApprenticeInternalTrainingEvents(map<string|string[]> headers = {}, *ListApprenticeInternalTrainingEventsQueries queries) returns json|error {
        string resourcePath = string `/ApprenticeInternalTrainingEvent`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from ApprenticeInternalTrainingEvent by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getApprenticeInternalTrainingEvent(string externalCode, map<string|string[]> headers = {}, *GetApprenticeInternalTrainingEventQueries queries) returns json|error {
        string resourcePath = string `/ApprenticeInternalTrainingEvent('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Delete entity from ApprenticeInternalTrainingEvent
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteApprenticeInternalTrainingEvent(string externalCode, DeleteApprenticeInternalTrainingEventHeaders headers = {}) returns error? {
        string resourcePath = string `/ApprenticeInternalTrainingEvent('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Apprentice
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listApprentices(map<string|string[]> headers = {}, *ListApprenticesQueries queries) returns Wrapper_7|error {
        string resourcePath = string `/Apprentice`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Apprentice
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createApprentice(Apprentice payload, map<string|string[]> headers = {}) returns Created\ Apprentice|error {
        string resourcePath = string `/Apprentice`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Apprentice by key
    #
    # + user - key: user
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getApprentice(string user, map<string|string[]> headers = {}, *GetApprenticeQueries queries) returns Apprentice_1|error {
        string resourcePath = string `/Apprentice('${getEncodedUri(user)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Apprentice
    #
    # + user - key: user
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateApprentice(string user, Modified\ Apprentice payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Apprentice('${getEncodedUri(user)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Apprentice
    #
    # + user - key: user
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteApprentice(string user, DeleteApprenticeHeaders headers = {}) returns error? {
        string resourcePath = string `/Apprentice('${getEncodedUri(user)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }
}
