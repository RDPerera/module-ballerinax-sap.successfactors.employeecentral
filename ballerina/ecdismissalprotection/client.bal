// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.org).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/data.jsondata;
import ballerina/http;
import ballerinax/sap;

# API to access data for dismissal protection.
#
# You can find your company's API server in [List of API Servers in SAP SuccessFactors.](https://help.sap.com/viewer/d599f15995d348a1b45ba5603e2aba9b/LATEST/en-US/af2b8d5437494b12be88fe374eba75b6.html)
public isolated client class Client {
    final sap:Client clientEp;

    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string hostname, int port = 443) returns error? {
        string serviceUrl = string `${hostname}:${port}/successfactors/odata/v2`;
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # Get entities from EmployeeDismissalProtectionDetail
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEmployeeDismissalProtectionDetails(map<string|string[]> headers = {}, *ListEmployeeDismissalProtectionDetailsQueries queries) returns Wrapper|error {
        string resourcePath = string `/EmployeeDismissalProtectionDetail`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to EmployeeDismissalProtectionDetail
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createEmployeeDismissalProtectionDetail(EmployeeDismissalProtectionDetail payload, map<string|string[]> headers = {}) returns CreatedEmployeeDismissalProtectionDetail|error {
        string resourcePath = string `/EmployeeDismissalProtectionDetail`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from EmployeeDismissalProtectionDetail by key
    #
    # + EmployeeDismissalProtection_workerId - key: EmployeeDismissalProtection_workerId
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEmployeeDismissalProtectionDetail(string EmployeeDismissalProtection_workerId, string externalCode, map<string|string[]> headers = {}, *GetEmployeeDismissalProtectionDetailQueries queries) returns EmployeeDismissalProtectionDetail_1|error {
        string resourcePath = string `/EmployeeDismissalProtectionDetail(EmployeeDismissalProtection_workerId='${getEncodedUri(EmployeeDismissalProtection_workerId)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in EmployeeDismissalProtectionDetail
    #
    # + EmployeeDismissalProtection_workerId - key: EmployeeDismissalProtection_workerId
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateEmployeeDismissalProtectionDetail(string EmployeeDismissalProtection_workerId, string externalCode, ModifiedEmployeeDismissalProtectionDetail payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/EmployeeDismissalProtectionDetail(EmployeeDismissalProtection_workerId='${getEncodedUri(EmployeeDismissalProtection_workerId)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from EmployeeDismissalProtectionDetail
    #
    # + EmployeeDismissalProtection_workerId - key: EmployeeDismissalProtection_workerId
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteEmployeeDismissalProtectionDetail(string EmployeeDismissalProtection_workerId, string externalCode, DeleteEmployeeDismissalProtectionDetailHeaders headers = {}) returns error? {
        string resourcePath = string `/EmployeeDismissalProtectionDetail(EmployeeDismissalProtection_workerId='${getEncodedUri(EmployeeDismissalProtection_workerId)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from EmployeeDismissalProtection
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEmployeeDismissalProtections(map<string|string[]> headers = {}, *ListEmployeeDismissalProtectionsQueries queries) returns Wrapper_1|error {
        string resourcePath = string `/EmployeeDismissalProtection`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to EmployeeDismissalProtection
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createEmployeeDismissalProtection(EmployeeDismissalProtection payload, map<string|string[]> headers = {}) returns CreatedEmployeeDismissalProtection|error {
        string resourcePath = string `/EmployeeDismissalProtection`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from EmployeeDismissalProtection by key
    #
    # + workerId - key: workerId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEmployeeDismissalProtection(string workerId, map<string|string[]> headers = {}, *GetEmployeeDismissalProtectionQueries queries) returns EmployeeDismissalProtection_1|error {
        string resourcePath = string `/EmployeeDismissalProtection('${getEncodedUri(workerId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in EmployeeDismissalProtection
    #
    # + workerId - key: workerId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateEmployeeDismissalProtection(string workerId, ModifiedEmployeeDismissalProtection payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/EmployeeDismissalProtection('${getEncodedUri(workerId)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from EmployeeDismissalProtection
    #
    # + workerId - key: workerId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteEmployeeDismissalProtection(string workerId, DeleteEmployeeDismissalProtectionHeaders headers = {}) returns error? {
        string resourcePath = string `/EmployeeDismissalProtection('${getEncodedUri(workerId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }
}
