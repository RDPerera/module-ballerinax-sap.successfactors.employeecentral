// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.org).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/data.jsondata;
import ballerina/http;
import ballerinax/sap;

# You can use these APIs to manage the information about employees skills.
#
# You can find your company's API server in [List of API Servers in SAP SuccessFactors.](https://help.sap.com/viewer/d599f15995d348a1b45ba5603e2aba9b/LATEST/en-US/af2b8d5437494b12be88fe374eba75b6.html)
public isolated client class Client {
    final sap:Client clientEp;

    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string hostname, int port = 443) returns error? {
        string serviceUrl = string `https://${hostname}:${port}/successfactors/odata/v2`;
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # Get entities from CertificationContent
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listCertificationContents(map<string|string[]> headers = {}, *ListCertificationContentsQueries queries) returns Wrapper|error {
        string resourcePath = string `/CertificationContent`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to CertificationContent
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createCertificationContent(CertificationContent payload, map<string|string[]> headers = {}) returns Created\ CertificationContent|error {
        string resourcePath = string `/CertificationContent`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from CertificationContent by key
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getCertificationContent(string JobProfile_externalCode, string externalCode, map<string|string[]> headers = {}, *GetCertificationContentQueries queries) returns CertificationContent_1|error {
        string resourcePath = string `/CertificationContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in CertificationContent
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateCertificationContent(string JobProfile_externalCode, string externalCode, Modified\ CertificationContent payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/CertificationContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from CertificationContent
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteCertificationContent(string JobProfile_externalCode, string externalCode, DeleteCertificationContentHeaders headers = {}) returns error? {
        string resourcePath = string `/CertificationContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from FamilyEntity
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listFamilyEntities(map<string|string[]> headers = {}, *ListFamilyEntitiesQueries queries) returns Wrapper_1|error {
        string resourcePath = string `/FamilyEntity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to FamilyEntity
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createFamilyEntity(FamilyEntity payload, map<string|string[]> headers = {}) returns Created\ FamilyEntity|error {
        string resourcePath = string `/FamilyEntity`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from FamilyEntity by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getFamilyEntity(string externalCode, map<string|string[]> headers = {}, *GetFamilyEntityQueries queries) returns FamilyEntity_1|error {
        string resourcePath = string `/FamilyEntity('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in FamilyEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateFamilyEntity(string externalCode, Modified\ FamilyEntity payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/FamilyEntity('${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from FamilyEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteFamilyEntity(string externalCode, DeleteFamilyEntityHeaders headers = {}) returns error? {
        string resourcePath = string `/FamilyEntity('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from CertificationEntity
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listCertificationEntities(map<string|string[]> headers = {}, *ListCertificationEntitiesQueries queries) returns Wrapper_2|error {
        string resourcePath = string `/CertificationEntity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to CertificationEntity
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createCertificationEntity(CertificationEntity payload, map<string|string[]> headers = {}) returns Created\ CertificationEntity|error {
        string resourcePath = string `/CertificationEntity`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from CertificationEntity by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getCertificationEntity(string externalCode, map<string|string[]> headers = {}, *GetCertificationEntityQueries queries) returns CertificationEntity_1|error {
        string resourcePath = string `/CertificationEntity('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in CertificationEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateCertificationEntity(string externalCode, Modified\ CertificationEntity payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/CertificationEntity('${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from CertificationEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteCertificationEntity(string externalCode, DeleteCertificationEntityHeaders headers = {}) returns error? {
        string resourcePath = string `/CertificationEntity('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from JobResponsibilityContent
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listJobResponsibilityContents(map<string|string[]> headers = {}, *ListJobResponsibilityContentsQueries queries) returns Wrapper_3|error {
        string resourcePath = string `/JobResponsibilityContent`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to JobResponsibilityContent
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createJobResponsibilityContent(JobResponsibilityContent payload, map<string|string[]> headers = {}) returns Created\ JobResponsibilityContent|error {
        string resourcePath = string `/JobResponsibilityContent`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from JobResponsibilityContent by key
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getJobResponsibilityContent(string JobProfile_externalCode, string externalCode, map<string|string[]> headers = {}, *GetJobResponsibilityContentQueries queries) returns JobResponsibilityContent_1|error {
        string resourcePath = string `/JobResponsibilityContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in JobResponsibilityContent
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateJobResponsibilityContent(string JobProfile_externalCode, string externalCode, Modified\ JobResponsibilityContent payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/JobResponsibilityContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from JobResponsibilityContent
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteJobResponsibilityContent(string JobProfile_externalCode, string externalCode, DeleteJobResponsibilityContentHeaders headers = {}) returns error? {
        string resourcePath = string `/JobResponsibilityContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from InterviewQuestionContent
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listInterviewQuestionContents(map<string|string[]> headers = {}, *ListInterviewQuestionContentsQueries queries) returns Wrapper_4|error {
        string resourcePath = string `/InterviewQuestionContent`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to InterviewQuestionContent
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createInterviewQuestionContent(InterviewQuestionContent payload, map<string|string[]> headers = {}) returns Created\ InterviewQuestionContent|error {
        string resourcePath = string `/InterviewQuestionContent`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from InterviewQuestionContent by key
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getInterviewQuestionContent(string JobProfile_externalCode, string externalCode, map<string|string[]> headers = {}, *GetInterviewQuestionContentQueries queries) returns InterviewQuestionContent_1|error {
        string resourcePath = string `/InterviewQuestionContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in InterviewQuestionContent
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateInterviewQuestionContent(string JobProfile_externalCode, string externalCode, Modified\ InterviewQuestionContent payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/InterviewQuestionContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from InterviewQuestionContent
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteInterviewQuestionContent(string JobProfile_externalCode, string externalCode, DeleteInterviewQuestionContentHeaders headers = {}) returns error? {
        string resourcePath = string `/InterviewQuestionContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from JobResponsibilityEntity
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listJobResponsibilityEntities(map<string|string[]> headers = {}, *ListJobResponsibilityEntitiesQueries queries) returns Wrapper_5|error {
        string resourcePath = string `/JobResponsibilityEntity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to JobResponsibilityEntity
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createJobResponsibilityEntity(JobResponsibilityEntity payload, map<string|string[]> headers = {}) returns Created\ JobResponsibilityEntity|error {
        string resourcePath = string `/JobResponsibilityEntity`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from JobResponsibilityEntity by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getJobResponsibilityEntity(string externalCode, map<string|string[]> headers = {}, *GetJobResponsibilityEntityQueries queries) returns JobResponsibilityEntity_1|error {
        string resourcePath = string `/JobResponsibilityEntity('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in JobResponsibilityEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateJobResponsibilityEntity(string externalCode, Modified\ JobResponsibilityEntity payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/JobResponsibilityEntity('${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from JobResponsibilityEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteJobResponsibilityEntity(string externalCode, DeleteJobResponsibilityEntityHeaders headers = {}) returns error? {
        string resourcePath = string `/JobResponsibilityEntity('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from RatedSkillMapping
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listRatedSkillMappings(map<string|string[]> headers = {}, *ListRatedSkillMappingsQueries queries) returns Wrapper_6|error {
        string resourcePath = string `/RatedSkillMapping`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to RatedSkillMapping
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createRatedSkillMapping(RatedSkillMapping payload, map<string|string[]> headers = {}) returns Created\ RatedSkillMapping|error {
        string resourcePath = string `/RatedSkillMapping`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from RatedSkillMapping by key
    #
    # + SkillProfile_externalCode - key: SkillProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getRatedSkillMapping(string SkillProfile_externalCode, string externalCode, map<string|string[]> headers = {}, *GetRatedSkillMappingQueries queries) returns RatedSkillMapping_1|error {
        string resourcePath = string `/RatedSkillMapping(SkillProfile_externalCode='${getEncodedUri(SkillProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in RatedSkillMapping
    #
    # + SkillProfile_externalCode - key: SkillProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateRatedSkillMapping(string SkillProfile_externalCode, string externalCode, Modified\ RatedSkillMapping payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/RatedSkillMapping(SkillProfile_externalCode='${getEncodedUri(SkillProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from RatedSkillMapping
    #
    # + SkillProfile_externalCode - key: SkillProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteRatedSkillMapping(string SkillProfile_externalCode, string externalCode, DeleteRatedSkillMappingHeaders headers = {}) returns error? {
        string resourcePath = string `/RatedSkillMapping(SkillProfile_externalCode='${getEncodedUri(SkillProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Role Competency Behavior mapping entity
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listRoleCompetencyBehaviorMappingEntities(map<string|string[]> headers = {}, *ListRoleCompetencyBehaviorMappingEntitiesQueries queries) returns Wrapper_7|error {
        string resourcePath = string `/RoleCompetencyBehaviorMappingEntity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Role Competency Behavior mapping entity.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createRoleCompetencyBehaviorMappingEntity(RoleCompetencyBehaviorMappingEntity payload, map<string|string[]> headers = {}) returns Created\ RoleCompetencyBehaviorMappingEntity|error {
        string resourcePath = string `/RoleCompetencyBehaviorMappingEntity`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Role Competency Behavior mapping entity by key.
    #
    # + RoleEntity_externalCode - key: RoleEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getRoleCompetencyBehaviorMappingEntity(string RoleEntity_externalCode, string externalCode, map<string|string[]> headers = {}, *GetRoleCompetencyBehaviorMappingEntityQueries queries) returns RoleCompetencyBehaviorMappingEntity_1|error {
        string resourcePath = string `/RoleCompetencyBehaviorMappingEntity(RoleEntity_externalCode='${getEncodedUri(RoleEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Role Competency Behavior mapping entity by key.
    #
    # + RoleEntity_externalCode - key: RoleEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateRoleCompetencyBehaviorMappingEntity(string RoleEntity_externalCode, string externalCode, Modified\ RoleCompetencyBehaviorMappingEntity payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/RoleCompetencyBehaviorMappingEntity(RoleEntity_externalCode='${getEncodedUri(RoleEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Role Competency Behavior mapping entity
    #
    # + RoleEntity_externalCode - key: RoleEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteRoleCompetencyBehaviorMappingEntity(string RoleEntity_externalCode, string externalCode, DeleteRoleCompetencyBehaviorMappingEntityHeaders headers = {}) returns error? {
        string resourcePath = string `/RoleCompetencyBehaviorMappingEntity(RoleEntity_externalCode='${getEncodedUri(RoleEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from RoleEntity
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listRoleEntities(map<string|string[]> headers = {}, *ListRoleEntitiesQueries queries) returns Wrapper_8|error {
        string resourcePath = string `/RoleEntity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to RoleEntity
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createRoleEntity(RoleEntity payload, map<string|string[]> headers = {}) returns Created\ RoleEntity|error {
        string resourcePath = string `/RoleEntity`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from RoleEntity by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getRoleEntity(string externalCode, map<string|string[]> headers = {}, *GetRoleEntityQueries queries) returns RoleEntity_1|error {
        string resourcePath = string `/RoleEntity('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in RoleEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateRoleEntity(string externalCode, Modified\ RoleEntity payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/RoleEntity('${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from RoleEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteRoleEntity(string externalCode, DeleteRoleEntityHeaders headers = {}) returns error? {
        string resourcePath = string `/RoleEntity('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from JobProfileLocalizedData
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listJobProfileLocalizedData(map<string|string[]> headers = {}, *ListJobProfileLocalizedDataQueries queries) returns Wrapper_9|error {
        string resourcePath = string `/JobProfileLocalizedData`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to JobProfileLocalizedData
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createJobProfileLocalizedData(JobProfileLocalizedData payload, map<string|string[]> headers = {}) returns Created\ JobProfileLocalizedData|error {
        string resourcePath = string `/JobProfileLocalizedData`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from JobProfileLocalizedData by key
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getJobProfileLocalizedData(string JobProfile_externalCode, string externalCode, map<string|string[]> headers = {}, *GetJobProfileLocalizedDataQueries queries) returns JobProfileLocalizedData_1|error {
        string resourcePath = string `/JobProfileLocalizedData(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in JobProfileLocalizedData
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateJobProfileLocalizedData(string JobProfile_externalCode, string externalCode, Modified\ JobProfileLocalizedData payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/JobProfileLocalizedData(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from JobProfileLocalizedData
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteJobProfileLocalizedData(string JobProfile_externalCode, string externalCode, DeleteJobProfileLocalizedDataHeaders headers = {}) returns error? {
        string resourcePath = string `/JobProfileLocalizedData(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from JobCodeMappingEntity
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listJobCodeMappingEntities(map<string|string[]> headers = {}, *ListJobCodeMappingEntitiesQueries queries) returns Wrapper_10|error {
        string resourcePath = string `/JobCodeMappingEntity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to JobCodeMappingEntity
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createJobCodeMappingEntity(JobCodeMappingEntity payload, map<string|string[]> headers = {}) returns Created\ JobCodeMappingEntity|error {
        string resourcePath = string `/JobCodeMappingEntity`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from JobCodeMappingEntity by key
    #
    # + RoleEntity_externalCode - key: RoleEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getJobCodeMappingEntity(string RoleEntity_externalCode, string externalCode, map<string|string[]> headers = {}, *GetJobCodeMappingEntityQueries queries) returns JobCodeMappingEntity_1|error {
        string resourcePath = string `/JobCodeMappingEntity(RoleEntity_externalCode='${getEncodedUri(RoleEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in JobCodeMappingEntity
    #
    # + RoleEntity_externalCode - key: RoleEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateJobCodeMappingEntity(string RoleEntity_externalCode, string externalCode, Modified\ JobCodeMappingEntity payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/JobCodeMappingEntity(RoleEntity_externalCode='${getEncodedUri(RoleEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from JobCodeMappingEntity
    #
    # + RoleEntity_externalCode - key: RoleEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteJobCodeMappingEntity(string RoleEntity_externalCode, string externalCode, DeleteJobCodeMappingEntityHeaders headers = {}) returns error? {
        string resourcePath = string `/JobCodeMappingEntity(RoleEntity_externalCode='${getEncodedUri(RoleEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from CompetencyType
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listCompetencyTypes(map<string|string[]> headers = {}, *ListCompetencyTypesQueries queries) returns Wrapper_11|error {
        string resourcePath = string `/CompetencyType`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to CompetencyType
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createCompetencyType(Competency payload, map<string|string[]> headers = {}) returns Created\ CompetencyType|error {
        string resourcePath = string `/CompetencyType`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from CompetencyType by key
    #
    # + GUID - key: GUID
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getCompetencyType(int GUID, map<string|string[]> headers = {}, *GetCompetencyTypeQueries queries) returns CompetencyType|error {
        string resourcePath = string `/CompetencyType(${getEncodedUri(GUID)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in CompetencyType
    #
    # + GUID - key: GUID
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateCompetencyType(int GUID, Modified\ CompetencyType payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/CompetencyType(${getEncodedUri(GUID)})`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from CompetencyType
    #
    # + GUID - key: GUID
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteCompetencyType(int GUID, DeleteCompetencyTypeHeaders headers = {}) returns error? {
        string resourcePath = string `/CompetencyType(${getEncodedUri(GUID)})`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from EmploymentConditionContent
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEmploymentConditionContents(map<string|string[]> headers = {}, *ListEmploymentConditionContentsQueries queries) returns Wrapper_12|error {
        string resourcePath = string `/EmploymentConditionContent`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to EmploymentConditionContent
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createEmploymentConditionContent(EmploymentConditionContent payload, map<string|string[]> headers = {}) returns Created\ EmploymentConditionContent|error {
        string resourcePath = string `/EmploymentConditionContent`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from EmploymentConditionContent by key
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEmploymentConditionContent(string JobProfile_externalCode, string externalCode, map<string|string[]> headers = {}, *GetEmploymentConditionContentQueries queries) returns EmploymentConditionContent_1|error {
        string resourcePath = string `/EmploymentConditionContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in EmploymentConditionContent
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateEmploymentConditionContent(string JobProfile_externalCode, string externalCode, Modified\ EmploymentConditionContent payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/EmploymentConditionContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from EmploymentConditionContent
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteEmploymentConditionContent(string JobProfile_externalCode, string externalCode, DeleteEmploymentConditionContentHeaders headers = {}) returns error? {
        string resourcePath = string `/EmploymentConditionContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from FamilyCompetencyMappingEntity
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listFamilyCompetencyMappingEntities(map<string|string[]> headers = {}, *ListFamilyCompetencyMappingEntitiesQueries queries) returns Wrapper_13|error {
        string resourcePath = string `/FamilyCompetencyMappingEntity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to FamilyCompetencyMappingEntity
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createFamilyCompetencyMappingEntity(FamilyCompetencyMappingEntity payload, map<string|string[]> headers = {}) returns Created\ FamilyCompetencyMappingEntity|error {
        string resourcePath = string `/FamilyCompetencyMappingEntity`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from FamilyCompetencyMappingEntity by key
    #
    # + FamilyEntity_externalCode - key: FamilyEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getFamilyCompetencyMappingEntity(string FamilyEntity_externalCode, string externalCode, map<string|string[]> headers = {}, *GetFamilyCompetencyMappingEntityQueries queries) returns FamilyCompetencyMappingEntity_1|error {
        string resourcePath = string `/FamilyCompetencyMappingEntity(FamilyEntity_externalCode='${getEncodedUri(FamilyEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in FamilyCompetencyMappingEntity
    #
    # + FamilyEntity_externalCode - key: FamilyEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateFamilyCompetencyMappingEntity(string FamilyEntity_externalCode, string externalCode, Modified\ FamilyCompetencyMappingEntity payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/FamilyCompetencyMappingEntity(FamilyEntity_externalCode='${getEncodedUri(FamilyEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from FamilyCompetencyMappingEntity
    #
    # + FamilyEntity_externalCode - key: FamilyEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteFamilyCompetencyMappingEntity(string FamilyEntity_externalCode, string externalCode, DeleteFamilyCompetencyMappingEntityHeaders headers = {}) returns error? {
        string resourcePath = string `/FamilyCompetencyMappingEntity(FamilyEntity_externalCode='${getEncodedUri(FamilyEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from PhysicalReqEntity
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPhysicalReqEntities(map<string|string[]> headers = {}, *ListPhysicalReqEntitiesQueries queries) returns Wrapper_14|error {
        string resourcePath = string `/PhysicalReqEntity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to PhysicalReqEntity
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createPhysicalReqEntity(PhysicalReqEntity payload, map<string|string[]> headers = {}) returns Created\ PhysicalReqEntity|error {
        string resourcePath = string `/PhysicalReqEntity`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from PhysicalReqEntity by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPhysicalReqEntity(string externalCode, map<string|string[]> headers = {}, *GetPhysicalReqEntityQueries queries) returns PhysicalReqEntity_1|error {
        string resourcePath = string `/PhysicalReqEntity('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in PhysicalReqEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updatePhysicalReqEntity(string externalCode, Modified\ PhysicalReqEntity payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/PhysicalReqEntity('${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from PhysicalReqEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deletePhysicalReqEntity(string externalCode, DeletePhysicalReqEntityHeaders headers = {}) returns error? {
        string resourcePath = string `/PhysicalReqEntity('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from InterviewQuestionEntity
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listInterviewQuestionEntities(map<string|string[]> headers = {}, *ListInterviewQuestionEntitiesQueries queries) returns Wrapper_15|error {
        string resourcePath = string `/InterviewQuestionEntity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to InterviewQuestionEntity
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createInterviewQuestionEntity(InterviewQuestionEntity payload, map<string|string[]> headers = {}) returns Created\ InterviewQuestionEntity|error {
        string resourcePath = string `/InterviewQuestionEntity`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from InterviewQuestionEntity by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getInterviewQuestionEntity(string externalCode, map<string|string[]> headers = {}, *GetInterviewQuestionEntityQueries queries) returns InterviewQuestionEntity_1|error {
        string resourcePath = string `/InterviewQuestionEntity('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in InterviewQuestionEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateInterviewQuestionEntity(string externalCode, Modified\ InterviewQuestionEntity payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/InterviewQuestionEntity('${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from InterviewQuestionEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteInterviewQuestionEntity(string externalCode, DeleteInterviewQuestionEntityHeaders headers = {}) returns error? {
        string resourcePath = string `/InterviewQuestionEntity('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from JDTemplateFamilyMapping
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listJDTemplateFamilyMappings(map<string|string[]> headers = {}, *ListJDTemplateFamilyMappingsQueries queries) returns Wrapper_16|error {
        string resourcePath = string `/JDTemplateFamilyMapping`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to JDTemplateFamilyMapping
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createJDTemplateFamilyMapping(JDTemplateFamilyMapping payload, map<string|string[]> headers = {}) returns Created\ JDTemplateFamilyMapping|error {
        string resourcePath = string `/JDTemplateFamilyMapping`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from JDTemplateFamilyMapping by key
    #
    # + JobDescTemplate_externalCode - key: JobDescTemplate_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getJDTemplateFamilyMapping(string JobDescTemplate_externalCode, string externalCode, map<string|string[]> headers = {}, *GetJDTemplateFamilyMappingQueries queries) returns JDTemplateFamilyMapping_1|error {
        string resourcePath = string `/JDTemplateFamilyMapping(JobDescTemplate_externalCode='${getEncodedUri(JobDescTemplate_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in JDTemplateFamilyMapping
    #
    # + JobDescTemplate_externalCode - key: JobDescTemplate_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateJDTemplateFamilyMapping(string JobDescTemplate_externalCode, string externalCode, Modified\ JDTemplateFamilyMapping payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/JDTemplateFamilyMapping(JobDescTemplate_externalCode='${getEncodedUri(JobDescTemplate_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from JDTemplateFamilyMapping
    #
    # + JobDescTemplate_externalCode - key: JobDescTemplate_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteJDTemplateFamilyMapping(string JobDescTemplate_externalCode, string externalCode, DeleteJDTemplateFamilyMappingHeaders headers = {}) returns error? {
        string resourcePath = string `/JDTemplateFamilyMapping(JobDescTemplate_externalCode='${getEncodedUri(JobDescTemplate_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from BehaviorMappingEntity
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBehaviorMappingEntities(map<string|string[]> headers = {}, *ListBehaviorMappingEntitiesQueries queries) returns Wrapper_17|error {
        string resourcePath = string `/BehaviorMappingEntity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to BehaviorMappingEntity
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBehaviorMappingEntity(BehaviorMappingEntity payload, map<string|string[]> headers = {}) returns Created\ BehaviorMappingEntity|error {
        string resourcePath = string `/BehaviorMappingEntity`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from BehaviorMappingEntity by key
    #
    # + CompetencyEntity_externalCode - key: CompetencyEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBehaviorMappingEntity(string CompetencyEntity_externalCode, string externalCode, map<string|string[]> headers = {}, *GetBehaviorMappingEntityQueries queries) returns BehaviorMappingEntity_1|error {
        string resourcePath = string `/BehaviorMappingEntity(CompetencyEntity_externalCode='${getEncodedUri(CompetencyEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in BehaviorMappingEntity
    #
    # + CompetencyEntity_externalCode - key: CompetencyEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBehaviorMappingEntity(string CompetencyEntity_externalCode, string externalCode, Modified\ BehaviorMappingEntity payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/BehaviorMappingEntity(CompetencyEntity_externalCode='${getEncodedUri(CompetencyEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from BehaviorMappingEntity
    #
    # + CompetencyEntity_externalCode - key: CompetencyEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBehaviorMappingEntity(string CompetencyEntity_externalCode, string externalCode, DeleteBehaviorMappingEntityHeaders headers = {}) returns error? {
        string resourcePath = string `/BehaviorMappingEntity(CompetencyEntity_externalCode='${getEncodedUri(CompetencyEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from SkillEntity
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listSkillEntities(map<string|string[]> headers = {}, *ListSkillEntitiesQueries queries) returns Wrapper_18|error {
        string resourcePath = string `/SkillEntity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to SkillEntity
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createSkillEntity(SkillEntity payload, map<string|string[]> headers = {}) returns Created\ SkillEntity|error {
        string resourcePath = string `/SkillEntity`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from SkillEntity by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSkillEntity(string externalCode, map<string|string[]> headers = {}, *GetSkillEntityQueries queries) returns SkillEntity_1|error {
        string resourcePath = string `/SkillEntity('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in SkillEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateSkillEntity(string externalCode, Modified\ SkillEntity payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/SkillEntity('${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from SkillEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteSkillEntity(string externalCode, DeleteSkillEntityHeaders headers = {}) returns error? {
        string resourcePath = string `/SkillEntity('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from PhysicalReqContent
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPhysicalReqContents(map<string|string[]> headers = {}, *ListPhysicalReqContentsQueries queries) returns Wrapper_19|error {
        string resourcePath = string `/PhysicalReqContent`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to PhysicalReqContent
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createPhysicalReqContent(PhysicalReqContent payload, map<string|string[]> headers = {}) returns Created\ PhysicalReqContent|error {
        string resourcePath = string `/PhysicalReqContent`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from PhysicalReqContent by key
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPhysicalReqContent(string JobProfile_externalCode, string externalCode, map<string|string[]> headers = {}, *GetPhysicalReqContentQueries queries) returns PhysicalReqContent_1|error {
        string resourcePath = string `/PhysicalReqContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in PhysicalReqContent
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updatePhysicalReqContent(string JobProfile_externalCode, string externalCode, Modified\ PhysicalReqContent payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/PhysicalReqContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from PhysicalReqContent
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deletePhysicalReqContent(string JobProfile_externalCode, string externalCode, DeletePhysicalReqContentHeaders headers = {}) returns error? {
        string resourcePath = string `/PhysicalReqContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from SkillContent
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listSkillContents(map<string|string[]> headers = {}, *ListSkillContentsQueries queries) returns Wrapper_20|error {
        string resourcePath = string `/SkillContent`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to SkillContent
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createSkillContent(SkillContent payload, map<string|string[]> headers = {}) returns Created\ SkillContent|error {
        string resourcePath = string `/SkillContent`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from SkillContent by key
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSkillContent(string JobProfile_externalCode, string externalCode, map<string|string[]> headers = {}, *GetSkillContentQueries queries) returns SkillContent_1|error {
        string resourcePath = string `/SkillContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in SkillContent
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateSkillContent(string JobProfile_externalCode, string externalCode, Modified\ SkillContent payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/SkillContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from SkillContent
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteSkillContent(string JobProfile_externalCode, string externalCode, DeleteSkillContentHeaders headers = {}) returns error? {
        string resourcePath = string `/SkillContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from RoleCompetencyMappingEntity
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listRoleCompetencyMappingEntities(map<string|string[]> headers = {}, *ListRoleCompetencyMappingEntitiesQueries queries) returns Wrapper_21|error {
        string resourcePath = string `/RoleCompetencyMappingEntity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to RoleCompetencyMappingEntity
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createRoleCompetencyMappingEntity(RoleCompetencyMappingEntity payload, map<string|string[]> headers = {}) returns Created\ RoleCompetencyMappingEntity|error {
        string resourcePath = string `/RoleCompetencyMappingEntity`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from RoleCompetencyMappingEntity by key
    #
    # + RoleEntity_externalCode - key: RoleEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getRoleCompetencyMappingEntity(string RoleEntity_externalCode, string externalCode, map<string|string[]> headers = {}, *GetRoleCompetencyMappingEntityQueries queries) returns RoleCompetencyMappingEntity_1|error {
        string resourcePath = string `/RoleCompetencyMappingEntity(RoleEntity_externalCode='${getEncodedUri(RoleEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in RoleCompetencyMappingEntity
    #
    # + RoleEntity_externalCode - key: RoleEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateRoleCompetencyMappingEntity(string RoleEntity_externalCode, string externalCode, Modified\ RoleCompetencyMappingEntity payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/RoleCompetencyMappingEntity(RoleEntity_externalCode='${getEncodedUri(RoleEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from RoleCompetencyMappingEntity
    #
    # + RoleEntity_externalCode - key: RoleEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteRoleCompetencyMappingEntity(string RoleEntity_externalCode, string externalCode, DeleteRoleCompetencyMappingEntityHeaders headers = {}) returns error? {
        string resourcePath = string `/RoleCompetencyMappingEntity(RoleEntity_externalCode='${getEncodedUri(RoleEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from SelfReportSkillMapping
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listSelfReportSkillMappings(map<string|string[]> headers = {}, *ListSelfReportSkillMappingsQueries queries) returns Wrapper_22|error {
        string resourcePath = string `/SelfReportSkillMapping`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to SelfReportSkillMapping
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createSelfReportSkillMapping(SelfReportSkillMapping payload, map<string|string[]> headers = {}) returns Created\ SelfReportSkillMapping|error {
        string resourcePath = string `/SelfReportSkillMapping`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from SelfReportSkillMapping by key
    #
    # + SkillProfile_externalCode - key: SkillProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSelfReportSkillMapping(string SkillProfile_externalCode, string externalCode, map<string|string[]> headers = {}, *GetSelfReportSkillMappingQueries queries) returns SelfReportSkillMapping_1|error {
        string resourcePath = string `/SelfReportSkillMapping(SkillProfile_externalCode='${getEncodedUri(SkillProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in SelfReportSkillMapping
    #
    # + SkillProfile_externalCode - key: SkillProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateSelfReportSkillMapping(string SkillProfile_externalCode, string externalCode, Modified\ SelfReportSkillMapping payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/SelfReportSkillMapping(SkillProfile_externalCode='${getEncodedUri(SkillProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from SelfReportSkillMapping
    #
    # + SkillProfile_externalCode - key: SkillProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteSelfReportSkillMapping(string SkillProfile_externalCode, string externalCode, DeleteSelfReportSkillMappingHeaders headers = {}) returns error? {
        string resourcePath = string `/SelfReportSkillMapping(SkillProfile_externalCode='${getEncodedUri(SkillProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from JobProfile
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listJobProfiles(map<string|string[]> headers = {}, *ListJobProfilesQueries queries) returns json|error {
        string resourcePath = string `/JobProfile`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from JobProfile by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getJobProfile(string externalCode, map<string|string[]> headers = {}, *GetJobProfileQueries queries) returns json|error {
        string resourcePath = string `/JobProfile('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Delete entity from JobProfile
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteJobProfile(string externalCode, DeleteJobProfileHeaders headers = {}) returns error? {
        string resourcePath = string `/JobProfile('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from FamilySkillMappingEntity
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listFamilySkillMappingEntities(map<string|string[]> headers = {}, *ListFamilySkillMappingEntitiesQueries queries) returns Wrapper_24|error {
        string resourcePath = string `/FamilySkillMappingEntity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to FamilySkillMappingEntity
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createFamilySkillMappingEntity(FamilySkillMappingEntity payload, map<string|string[]> headers = {}) returns Created\ FamilySkillMappingEntity|error {
        string resourcePath = string `/FamilySkillMappingEntity`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from FamilySkillMappingEntity by key
    #
    # + FamilyEntity_externalCode - key: FamilyEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getFamilySkillMappingEntity(string FamilyEntity_externalCode, string externalCode, map<string|string[]> headers = {}, *GetFamilySkillMappingEntityQueries queries) returns FamilySkillMappingEntity_1|error {
        string resourcePath = string `/FamilySkillMappingEntity(FamilyEntity_externalCode='${getEncodedUri(FamilyEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in FamilySkillMappingEntity
    #
    # + FamilyEntity_externalCode - key: FamilyEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateFamilySkillMappingEntity(string FamilyEntity_externalCode, string externalCode, Modified\ FamilySkillMappingEntity payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/FamilySkillMappingEntity(FamilyEntity_externalCode='${getEncodedUri(FamilyEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from FamilySkillMappingEntity
    #
    # + FamilyEntity_externalCode - key: FamilyEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteFamilySkillMappingEntity(string FamilyEntity_externalCode, string externalCode, DeleteFamilySkillMappingEntityHeaders headers = {}) returns error? {
        string resourcePath = string `/FamilySkillMappingEntity(FamilyEntity_externalCode='${getEncodedUri(FamilyEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from RoleSkillMappingEntity
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listRoleSkillMappingEntities(map<string|string[]> headers = {}, *ListRoleSkillMappingEntitiesQueries queries) returns Wrapper_25|error {
        string resourcePath = string `/RoleSkillMappingEntity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to RoleSkillMappingEntity
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createRoleSkillMappingEntity(RoleSkillMappingEntity payload, map<string|string[]> headers = {}) returns Created\ RoleSkillMappingEntity|error {
        string resourcePath = string `/RoleSkillMappingEntity`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from RoleSkillMappingEntity by key
    #
    # + RoleEntity_externalCode - key: RoleEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getRoleSkillMappingEntity(string RoleEntity_externalCode, string externalCode, map<string|string[]> headers = {}, *GetRoleSkillMappingEntityQueries queries) returns RoleSkillMappingEntity_1|error {
        string resourcePath = string `/RoleSkillMappingEntity(RoleEntity_externalCode='${getEncodedUri(RoleEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in RoleSkillMappingEntity
    #
    # + RoleEntity_externalCode - key: RoleEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateRoleSkillMappingEntity(string RoleEntity_externalCode, string externalCode, Modified\ RoleSkillMappingEntity payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/RoleSkillMappingEntity(RoleEntity_externalCode='${getEncodedUri(RoleEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from RoleSkillMappingEntity
    #
    # + RoleEntity_externalCode - key: RoleEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteRoleSkillMappingEntity(string RoleEntity_externalCode, string externalCode, DeleteRoleSkillMappingEntityHeaders headers = {}) returns error? {
        string resourcePath = string `/RoleSkillMappingEntity(RoleEntity_externalCode='${getEncodedUri(RoleEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from JobDescTemplate
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listJobDescTemplates(map<string|string[]> headers = {}, *ListJobDescTemplatesQueries queries) returns Wrapper_26|error {
        string resourcePath = string `/JobDescTemplate`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to JobDescTemplate
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createJobDescTemplate(JobDescTemplate payload, map<string|string[]> headers = {}) returns Created\ JobDescTemplate|error {
        string resourcePath = string `/JobDescTemplate`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from JobDescTemplate by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getJobDescTemplate(string externalCode, map<string|string[]> headers = {}, *GetJobDescTemplateQueries queries) returns JobDescTemplate_1|error {
        string resourcePath = string `/JobDescTemplate('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in JobDescTemplate
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateJobDescTemplate(string externalCode, Modified\ JobDescTemplate payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/JobDescTemplate('${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from JobDescTemplate
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteJobDescTemplate(string externalCode, DeleteJobDescTemplateHeaders headers = {}) returns error? {
        string resourcePath = string `/JobDescTemplate('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from SkillProfile
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listSkillProfiles(map<string|string[]> headers = {}, *ListSkillProfilesQueries queries) returns Wrapper_27|error {
        string resourcePath = string `/SkillProfile`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to SkillProfile
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createSkillProfile(SkillProfile payload, map<string|string[]> headers = {}) returns Created\ SkillProfile|error {
        string resourcePath = string `/SkillProfile`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from SkillProfile by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSkillProfile(string externalCode, map<string|string[]> headers = {}, *GetSkillProfileQueries queries) returns SkillProfile_1|error {
        string resourcePath = string `/SkillProfile('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in SkillProfile
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateSkillProfile(string externalCode, Modified\ SkillProfile payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/SkillProfile('${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from SkillProfile
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteSkillProfile(string externalCode, DeleteSkillProfileHeaders headers = {}) returns error? {
        string resourcePath = string `/SkillProfile('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from CompetencyEntity
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listCompetencyEntities(map<string|string[]> headers = {}, *ListCompetencyEntitiesQueries queries) returns Wrapper_28|error {
        string resourcePath = string `/CompetencyEntity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to CompetencyEntity
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createCompetencyEntity(CompetencyEntity payload, map<string|string[]> headers = {}) returns Created\ CompetencyEntity|error {
        string resourcePath = string `/CompetencyEntity`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from CompetencyEntity by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getCompetencyEntity(string externalCode, map<string|string[]> headers = {}, *GetCompetencyEntityQueries queries) returns CompetencyEntity_1|error {
        string resourcePath = string `/CompetencyEntity('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in CompetencyEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateCompetencyEntity(string externalCode, Modified\ CompetencyEntity payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/CompetencyEntity('${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from CompetencyEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteCompetencyEntity(string externalCode, DeleteCompetencyEntityHeaders headers = {}) returns error? {
        string resourcePath = string `/CompetencyEntity('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from CompetencyContent
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listCompetencyContents(map<string|string[]> headers = {}, *ListCompetencyContentsQueries queries) returns Wrapper_29|error {
        string resourcePath = string `/CompetencyContent`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to CompetencyContent
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createCompetencyContent(CompetencyContent payload, map<string|string[]> headers = {}) returns Created\ CompetencyContent|error {
        string resourcePath = string `/CompetencyContent`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from CompetencyContent by key
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getCompetencyContent(string JobProfile_externalCode, string externalCode, map<string|string[]> headers = {}, *GetCompetencyContentQueries queries) returns CompetencyContent_1|error {
        string resourcePath = string `/CompetencyContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in CompetencyContent
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateCompetencyContent(string JobProfile_externalCode, string externalCode, Modified\ CompetencyContent payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/CompetencyContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from CompetencyContent
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteCompetencyContent(string JobProfile_externalCode, string externalCode, DeleteCompetencyContentHeaders headers = {}) returns error? {
        string resourcePath = string `/CompetencyContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from RelevantIndustryEntity
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listRelevantIndustryEntities(map<string|string[]> headers = {}, *ListRelevantIndustryEntitiesQueries queries) returns Wrapper_30|error {
        string resourcePath = string `/RelevantIndustryEntity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to RelevantIndustryEntity
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createRelevantIndustryEntity(RelevantIndustryEntity payload, map<string|string[]> headers = {}) returns Created\ RelevantIndustryEntity|error {
        string resourcePath = string `/RelevantIndustryEntity`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from RelevantIndustryEntity by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getRelevantIndustryEntity(string externalCode, map<string|string[]> headers = {}, *GetRelevantIndustryEntityQueries queries) returns RelevantIndustryEntity_1|error {
        string resourcePath = string `/RelevantIndustryEntity('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in RelevantIndustryEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateRelevantIndustryEntity(string externalCode, Modified\ RelevantIndustryEntity payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/RelevantIndustryEntity('${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from RelevantIndustryEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteRelevantIndustryEntity(string externalCode, DeleteRelevantIndustryEntityHeaders headers = {}) returns error? {
        string resourcePath = string `/RelevantIndustryEntity('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from RoleTalentPoolMappingEntity
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listRoleTalentPoolMappingEntities(map<string|string[]> headers = {}, *ListRoleTalentPoolMappingEntitiesQueries queries) returns Wrapper_31|error {
        string resourcePath = string `/RoleTalentPoolMappingEntity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to RoleTalentPoolMappingEntity
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createRoleTalentPoolMappingEntity(RoleTalentPoolMappingEntity payload, map<string|string[]> headers = {}) returns Created\ RoleTalentPoolMappingEntity|error {
        string resourcePath = string `/RoleTalentPoolMappingEntity`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from RoleTalentPoolMappingEntity by key
    #
    # + RoleEntity_externalCode - key: RoleEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getRoleTalentPoolMappingEntity(string RoleEntity_externalCode, string externalCode, map<string|string[]> headers = {}, *GetRoleTalentPoolMappingEntityQueries queries) returns RoleTalentPoolMappingEntity_1|error {
        string resourcePath = string `/RoleTalentPoolMappingEntity(RoleEntity_externalCode='${getEncodedUri(RoleEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in RoleTalentPoolMappingEntity
    #
    # + RoleEntity_externalCode - key: RoleEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateRoleTalentPoolMappingEntity(string RoleEntity_externalCode, string externalCode, Modified\ RoleTalentPoolMappingEntity payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/RoleTalentPoolMappingEntity(RoleEntity_externalCode='${getEncodedUri(RoleEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from RoleTalentPoolMappingEntity
    #
    # + RoleEntity_externalCode - key: RoleEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteRoleTalentPoolMappingEntity(string RoleEntity_externalCode, string externalCode, DeleteRoleTalentPoolMappingEntityHeaders headers = {}) returns error? {
        string resourcePath = string `/RoleTalentPoolMappingEntity(RoleEntity_externalCode='${getEncodedUri(RoleEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from EmploymentConditionEntity
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEmploymentConditionEntities(map<string|string[]> headers = {}, *ListEmploymentConditionEntitiesQueries queries) returns Wrapper_32|error {
        string resourcePath = string `/EmploymentConditionEntity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to EmploymentConditionEntity
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createEmploymentConditionEntity(EmploymentConditionEntity payload, map<string|string[]> headers = {}) returns Created\ EmploymentConditionEntity|error {
        string resourcePath = string `/EmploymentConditionEntity`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from EmploymentConditionEntity by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEmploymentConditionEntity(string externalCode, map<string|string[]> headers = {}, *GetEmploymentConditionEntityQueries queries) returns EmploymentConditionEntity_1|error {
        string resourcePath = string `/EmploymentConditionEntity('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in EmploymentConditionEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateEmploymentConditionEntity(string externalCode, Modified\ EmploymentConditionEntity payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/EmploymentConditionEntity('${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from EmploymentConditionEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteEmploymentConditionEntity(string externalCode, DeleteEmploymentConditionEntityHeaders headers = {}) returns error? {
        string resourcePath = string `/EmploymentConditionEntity('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from JobDescSection
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listJobDescSections(map<string|string[]> headers = {}, *ListJobDescSectionsQueries queries) returns Wrapper_33|error {
        string resourcePath = string `/JobDescSection`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to JobDescSection
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createJobDescSection(JobDescSection payload, map<string|string[]> headers = {}) returns Created\ JobDescSection|error {
        string resourcePath = string `/JobDescSection`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from JobDescSection by key
    #
    # + JobDescTemplate_externalCode - key: JobDescTemplate_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getJobDescSection(string JobDescTemplate_externalCode, string externalCode, map<string|string[]> headers = {}, *GetJobDescSectionQueries queries) returns JobDescSection_1|error {
        string resourcePath = string `/JobDescSection(JobDescTemplate_externalCode='${getEncodedUri(JobDescTemplate_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in JobDescSection
    #
    # + JobDescTemplate_externalCode - key: JobDescTemplate_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateJobDescSection(string JobDescTemplate_externalCode, string externalCode, Modified\ JobDescSection payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/JobDescSection(JobDescTemplate_externalCode='${getEncodedUri(JobDescTemplate_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from JobDescSection
    #
    # + JobDescTemplate_externalCode - key: JobDescTemplate_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteJobDescSection(string JobDescTemplate_externalCode, string externalCode, DeleteJobDescSectionHeaders headers = {}) returns error? {
        string resourcePath = string `/JobDescSection(JobDescTemplate_externalCode='${getEncodedUri(JobDescTemplate_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from RelevantIndustryContent
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listRelevantIndustryContents(map<string|string[]> headers = {}, *ListRelevantIndustryContentsQueries queries) returns Wrapper_34|error {
        string resourcePath = string `/RelevantIndustryContent`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to RelevantIndustryContent
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createRelevantIndustryContent(RelevantIndustryContent payload, map<string|string[]> headers = {}) returns Created\ RelevantIndustryContent|error {
        string resourcePath = string `/RelevantIndustryContent`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from RelevantIndustryContent by key
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getRelevantIndustryContent(string JobProfile_externalCode, string externalCode, map<string|string[]> headers = {}, *GetRelevantIndustryContentQueries queries) returns RelevantIndustryContent_1|error {
        string resourcePath = string `/RelevantIndustryContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in RelevantIndustryContent
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateRelevantIndustryContent(string JobProfile_externalCode, string externalCode, Modified\ RelevantIndustryContent payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/RelevantIndustryContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from RelevantIndustryContent
    #
    # + JobProfile_externalCode - key: JobProfile_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteRelevantIndustryContent(string JobProfile_externalCode, string externalCode, DeleteRelevantIndustryContentHeaders headers = {}) returns error? {
        string resourcePath = string `/RelevantIndustryContent(JobProfile_externalCode='${getEncodedUri(JobProfile_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from PositionEntity
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPositionEntities(map<string|string[]> headers = {}, *ListPositionEntitiesQueries queries) returns Wrapper_35|error {
        string resourcePath = string `/PositionEntity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to PositionEntity
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createPositionEntity(PositionEntity payload, map<string|string[]> headers = {}) returns Created\ PositionEntity|error {
        string resourcePath = string `/PositionEntity`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from PositionEntity by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPositionEntity(string externalCode, map<string|string[]> headers = {}, *GetPositionEntityQueries queries) returns PositionEntity_1|error {
        string resourcePath = string `/PositionEntity('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in PositionEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updatePositionEntity(string externalCode, Modified\ PositionEntity payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/PositionEntity('${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from PositionEntity
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deletePositionEntity(string externalCode, DeletePositionEntityHeaders headers = {}) returns error? {
        string resourcePath = string `/PositionEntity('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from PositionCompetencyMappingEntity
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPositionCompetencyMappingEntities(map<string|string[]> headers = {}, *ListPositionCompetencyMappingEntitiesQueries queries) returns Wrapper_36|error {
        string resourcePath = string `/PositionCompetencyMappingEntity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to PositionCompetencyMappingEntity
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createPositionCompetencyMappingEntity(PositionCompetencyMappingEntity payload, map<string|string[]> headers = {}) returns Created\ PositionCompetencyMappingEntity|error {
        string resourcePath = string `/PositionCompetencyMappingEntity`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from PositionCompetencyMappingEntity by key
    #
    # + PositionEntity_externalCode - key: PositionEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPositionCompetencyMappingEntity(string PositionEntity_externalCode, string externalCode, map<string|string[]> headers = {}, *GetPositionCompetencyMappingEntityQueries queries) returns PositionCompetencyMappingEntity_1|error {
        string resourcePath = string `/PositionCompetencyMappingEntity(PositionEntity_externalCode='${getEncodedUri(PositionEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in PositionCompetencyMappingEntity
    #
    # + PositionEntity_externalCode - key: PositionEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updatePositionCompetencyMappingEntity(string PositionEntity_externalCode, string externalCode, Modified\ PositionCompetencyMappingEntity payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/PositionCompetencyMappingEntity(PositionEntity_externalCode='${getEncodedUri(PositionEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from PositionCompetencyMappingEntity
    #
    # + PositionEntity_externalCode - key: PositionEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deletePositionCompetencyMappingEntity(string PositionEntity_externalCode, string externalCode, DeletePositionCompetencyMappingEntityHeaders headers = {}) returns error? {
        string resourcePath = string `/PositionCompetencyMappingEntity(PositionEntity_externalCode='${getEncodedUri(PositionEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from PositionSkillMappingEntity
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPositionSkillMappingEntities(map<string|string[]> headers = {}, *ListPositionSkillMappingEntitiesQueries queries) returns Wrapper_37|error {
        string resourcePath = string `/PositionSkillMappingEntity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to PositionSkillMappingEntity
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createPositionSkillMappingEntity(PositionSkillMappingEntity payload, map<string|string[]> headers = {}) returns Created\ PositionSkillMappingEntity|error {
        string resourcePath = string `/PositionSkillMappingEntity`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from PositionSkillMappingEntity by key
    #
    # + PositionEntity_externalCode - key: PositionEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPositionSkillMappingEntity(string PositionEntity_externalCode, string externalCode, map<string|string[]> headers = {}, *GetPositionSkillMappingEntityQueries queries) returns PositionSkillMappingEntity_1|error {
        string resourcePath = string `/PositionSkillMappingEntity(PositionEntity_externalCode='${getEncodedUri(PositionEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in PositionSkillMappingEntity
    #
    # + PositionEntity_externalCode - key: PositionEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updatePositionSkillMappingEntity(string PositionEntity_externalCode, string externalCode, Modified\ PositionSkillMappingEntity payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/PositionSkillMappingEntity(PositionEntity_externalCode='${getEncodedUri(PositionEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from PositionSkillMappingEntity
    #
    # + PositionEntity_externalCode - key: PositionEntity_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deletePositionSkillMappingEntity(string PositionEntity_externalCode, string externalCode, DeletePositionSkillMappingEntityHeaders headers = {}) returns error? {
        string resourcePath = string `/PositionSkillMappingEntity(PositionEntity_externalCode='${getEncodedUri(PositionEntity_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }
}
