// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.org).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/data.jsondata;
import ballerina/http;
import ballerinax/sap;

# You can use these APIs to access the information about the replication status of employee data from Employee Central to payroll systems. The APIs are used in the standard integrations from SAP SuccessFactors Employee Central to SAP ERP, SAP S/4HANA and SAP SuccessFactors Employee Central Payroll.
#
# You can find your company's API server in [List of API Servers in SAP SuccessFactors.](https://help.sap.com/viewer/d599f15995d348a1b45ba5603e2aba9b/LATEST/en-US/af2b8d5437494b12be88fe374eba75b6.html)
public isolated client class Client {
    final sap:Client clientEp;

    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string hostname, int port = 443) returns error? {
        string serviceUrl = string `${hostname}:${port}/successfactors/odata/v2`;
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # Get entities from EmployeeDataReplicationConfirmationErrorMessage
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEmployeeDataReplicationConfirmationErrorMessages(map<string|string[]> headers = {}, *ListEmployeeDataReplicationConfirmationErrorMessagesQueries queries) returns Wrapper|error {
        string resourcePath = string `/EmployeeDataReplicationConfirmationErrorMessage`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to EmployeeDataReplicationConfirmationErrorMessage
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createEmployeeDataReplicationConfirmationErrorMessage(EmployeeDataReplicationConfirmationErrorMessage payload, map<string|string[]> headers = {}) returns CreatedEmployeeDataReplicationConfirmationErrorMessage|error {
        string resourcePath = string `/EmployeeDataReplicationConfirmationErrorMessage`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from EmployeeDataReplicationConfirmationErrorMessage by key
    #
    # + EmployeeDataReplicationConfirmation_externalCode - key: EmployeeDataReplicationConfirmation_externalCode
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEmployeeDataReplicationConfirmationErrorMessage(string EmployeeDataReplicationConfirmation_externalCode, string externalCode, map<string|string[]> headers = {}, *GetEmployeeDataReplicationConfirmationErrorMessageQueries queries) returns EmployeeDataReplicationConfirmationErrorMessage_1|error {
        string resourcePath = string `/EmployeeDataReplicationConfirmationErrorMessage(EmployeeDataReplicationConfirmation_externalCode='${getEncodedUri(EmployeeDataReplicationConfirmation_externalCode)}',externalCode='${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from EmployeeDataReplicationElement
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEmployeeDataReplicationElements(map<string|string[]> headers = {}, *ListEmployeeDataReplicationElementsQueries queries) returns Wrapper_1|error {
        string resourcePath = string `/EmployeeDataReplicationElement`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from EmployeeDataReplicationElement by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEmployeeDataReplicationElement(string externalCode, map<string|string[]> headers = {}, *GetEmployeeDataReplicationElementQueries queries) returns EmployeeDataReplicationElement_1|error {
        string resourcePath = string `/EmployeeDataReplicationElement('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Delete entity from EmployeeDataReplicationElement
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteEmployeeDataReplicationElement(string externalCode, DeleteEmployeeDataReplicationElementHeaders headers = {}) returns error? {
        string resourcePath = string `/EmployeeDataReplicationElement('${getEncodedUri(externalCode)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from EmployeeDataReplicationNotification
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEmployeeDataReplicationNotifications(map<string|string[]> headers = {}, *ListEmployeeDataReplicationNotificationsQueries queries) returns Wrapper_2|error {
        string resourcePath = string `/EmployeeDataReplicationNotification`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to EmployeeDataReplicationNotification
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createEmployeeDataReplicationNotification(EmployeeDataReplicationNotification payload, map<string|string[]> headers = {}) returns CreatedEmployeeDataReplicationNotification|error {
        string resourcePath = string `/EmployeeDataReplicationNotification`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from EmployeeDataReplicationNotification by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEmployeeDataReplicationNotification(string externalCode, map<string|string[]> headers = {}, *GetEmployeeDataReplicationNotificationQueries queries) returns EmployeeDataReplicationNotification_1|error {
        string resourcePath = string `/EmployeeDataReplicationNotification('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from EmployeeDataReplicationConfirmation
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEmployeeDataReplicationConfirmations(map<string|string[]> headers = {}, *ListEmployeeDataReplicationConfirmationsQueries queries) returns Wrapper_3|error {
        string resourcePath = string `/EmployeeDataReplicationConfirmation`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to EmployeeDataReplicationConfirmation
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createEmployeeDataReplicationConfirmation(EmployeeDataReplicationConfirmation payload, map<string|string[]> headers = {}) returns CreatedEmployeeDataReplicationConfirmation|error {
        string resourcePath = string `/EmployeeDataReplicationConfirmation`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from EmployeeDataReplicationConfirmation by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEmployeeDataReplicationConfirmation(string externalCode, map<string|string[]> headers = {}, *GetEmployeeDataReplicationConfirmationQueries queries) returns EmployeeDataReplicationConfirmation_1|error {
        string resourcePath = string `/EmployeeDataReplicationConfirmation('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }
}
