// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.org).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/data.jsondata;
import ballerina/http;
import ballerinax/sap;

# You can use these APIs to maintain the general background information of an employee, including education and outside work experiences.
#
# You can find your company's API server in [List of API Servers in SAP SuccessFactors.](https://help.sap.com/viewer/d599f15995d348a1b45ba5603e2aba9b/LATEST/en-US/af2b8d5437494b12be88fe374eba75b6.html)
public isolated client class Client {
    final sap:Client clientEp;

    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string hostname, int port = 443) returns error? {
        string serviceUrl = string `https://${hostname}:${port}/successfactors/odata/v2`;
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # Get entities from Background_Community
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBackgroundCommunities(map<string|string[]> headers = {}, *ListBackgroundCommunitiesQueries queries) returns Wrapper|error {
        string resourcePath = string `/Background_Community`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Background_Community
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBackgroundCommunity(Background_Community payload, map<string|string[]> headers = {}) returns CreatedBackground_Community|error {
        string resourcePath = string `/Background_Community`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Background_Community by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBackgroundCommunity(int backgroundElementId, string userId, map<string|string[]> headers = {}, *GetBackgroundCommunityQueries queries) returns Background_Community_1|error {
        string resourcePath = string `/Background_Community(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Background_Community
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBackgroundCommunity(int backgroundElementId, string userId, ModifiedBackground_Community payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Background_Community(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Background_Community
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBackgroundCommunity(int backgroundElementId, string userId, DeleteBackgroundCommunityHeaders headers = {}) returns error? {
        string resourcePath = string `/Background_Community(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Background_Courses
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBackgroundCoursess(map<string|string[]> headers = {}, *ListBackgroundCoursessQueries queries) returns Wrapper_1|error {
        string resourcePath = string `/Background_Courses`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Background_Courses
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBackgroundCourses(Background_Courses payload, map<string|string[]> headers = {}) returns CreatedBackground_Courses|error {
        string resourcePath = string `/Background_Courses`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Background_Courses by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBackgroundCourses(int backgroundElementId, string userId, map<string|string[]> headers = {}, *GetBackgroundCoursesQueries queries) returns Background_Courses_1|error {
        string resourcePath = string `/Background_Courses(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Background_Courses
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBackgroundCourses(int backgroundElementId, string userId, ModifiedBackground_Courses payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Background_Courses(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Background_Courses
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBackgroundCourses(int backgroundElementId, string userId, DeleteBackgroundCoursesHeaders headers = {}) returns error? {
        string resourcePath = string `/Background_Courses(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Background_Benefitselection
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBackgroundBenefitselections(map<string|string[]> headers = {}, *ListBackgroundBenefitselectionsQueries queries) returns Wrapper_2|error {
        string resourcePath = string `/Background_Benefitselection`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Background_Benefitselection
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBackgroundBenefitselection(Background_Benefitselection payload, map<string|string[]> headers = {}) returns CreatedBackground_Benefitselection|error {
        string resourcePath = string `/Background_Benefitselection`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Background_Benefitselection by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBackgroundBenefitselection(int backgroundElementId, string userId, map<string|string[]> headers = {}, *GetBackgroundBenefitselectionQueries queries) returns BackgroundBenefitselection|error {
        string resourcePath = string `/Background_Benefitselection(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Background_Benefitselection
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBackgroundBenefitselection(int backgroundElementId, string userId, ModifiedBackground_Benefitselection payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Background_Benefitselection(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Background_Benefitselection
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBackgroundBenefitselection(int backgroundElementId, string userId, DeleteBackgroundBenefitselectionHeaders headers = {}) returns error? {
        string resourcePath = string `/Background_Benefitselection(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Background_OutsideWorkExperience
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBackgroundOutsideWorkExperiences(map<string|string[]> headers = {}, *ListBackgroundOutsideWorkExperiencesQueries queries) returns Wrapper_3|error {
        string resourcePath = string `/Background_OutsideWorkExperience`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Background_OutsideWorkExperience
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBackgroundOutsideWorkExperience(Background_OutsideWorkExperience payload, map<string|string[]> headers = {}) returns CreatedBackground_OutsideWorkExperience|error {
        string resourcePath = string `/Background_OutsideWorkExperience`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Background_OutsideWorkExperience by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBackgroundOutsideWorkExperience(int backgroundElementId, string userId, map<string|string[]> headers = {}, *GetBackgroundOutsideWorkExperienceQueries queries) returns Background_OutsideWorkExperience_1|error {
        string resourcePath = string `/Background_OutsideWorkExperience(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Background_OutsideWorkExperience
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBackgroundOutsideWorkExperience(int backgroundElementId, string userId, ModifiedBackground_OutsideWorkExperience payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Background_OutsideWorkExperience(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Background_OutsideWorkExperience
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBackgroundOutsideWorkExperience(int backgroundElementId, string userId, DeleteBackgroundOutsideWorkExperienceHeaders headers = {}) returns error? {
        string resourcePath = string `/Background_OutsideWorkExperience(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Background_Promotability
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBackgroundPromotabilities(map<string|string[]> headers = {}, *ListBackgroundPromotabilitiesQueries queries) returns Wrapper_4|error {
        string resourcePath = string `/Background_Promotability`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Background_Promotability
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBackgroundPromotability(Background_Promotability payload, map<string|string[]> headers = {}) returns CreatedBackground_Promotability|error {
        string resourcePath = string `/Background_Promotability`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Background_Promotability by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBackgroundPromotability(int backgroundElementId, string userId, map<string|string[]> headers = {}, *GetBackgroundPromotabilityQueries queries) returns Background_Promotability_1|error {
        string resourcePath = string `/Background_Promotability(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Background_Promotability
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBackgroundPromotability(int backgroundElementId, string userId, ModifiedBackground_Promotability payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Background_Promotability(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Background_Promotability
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBackgroundPromotability(int backgroundElementId, string userId, DeleteBackgroundPromotabilityHeaders headers = {}) returns error? {
        string resourcePath = string `/Background_Promotability(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Background_Fsaelection
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBackgroundFsaelections(map<string|string[]> headers = {}, *ListBackgroundFsaelectionsQueries queries) returns Wrapper_5|error {
        string resourcePath = string `/Background_Fsaelection`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Background_Fsaelection
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBackgroundFsaelection(Background_Fsaelection payload, map<string|string[]> headers = {}) returns CreatedBackground_Fsaelection|error {
        string resourcePath = string `/Background_Fsaelection`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Background_Fsaelection by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBackgroundFsaelection(int backgroundElementId, string userId, map<string|string[]> headers = {}, *GetBackgroundFsaelectionQueries queries) returns Background_Fsaelection_1|error {
        string resourcePath = string `/Background_Fsaelection(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Background_Fsaelection
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBackgroundFsaelection(int backgroundElementId, string userId, ModifiedBackground_Fsaelection payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Background_Fsaelection(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Background_Fsaelection
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBackgroundFsaelection(int backgroundElementId, string userId, DeleteBackgroundFsaelectionHeaders headers = {}) returns error? {
        string resourcePath = string `/Background_Fsaelection(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Background_Compensation
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBackgroundCompensations(map<string|string[]> headers = {}, *ListBackgroundCompensationsQueries queries) returns Wrapper_6|error {
        string resourcePath = string `/Background_Compensation`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Background_Compensation
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBackgroundCompensation(Background_Compensation payload, map<string|string[]> headers = {}) returns CreatedBackground_Compensation|error {
        string resourcePath = string `/Background_Compensation`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Background_Compensation by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBackgroundCompensation(int backgroundElementId, string userId, map<string|string[]> headers = {}, *GetBackgroundCompensationQueries queries) returns Background_Compensation_1|error {
        string resourcePath = string `/Background_Compensation(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Background_Compensation
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBackgroundCompensation(int backgroundElementId, string userId, ModifiedBackground_Compensation payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Background_Compensation(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Background_Compensation
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBackgroundCompensation(int backgroundElementId, string userId, DeleteBackgroundCompensationHeaders headers = {}) returns error? {
        string resourcePath = string `/Background_Compensation(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Background_Memberships
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBackgroundMembershipss(map<string|string[]> headers = {}, *ListBackgroundMembershipssQueries queries) returns Wrapper_7|error {
        string resourcePath = string `/Background_Memberships`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Background_Memberships
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBackgroundMemberships(Background_Memberships payload, map<string|string[]> headers = {}) returns CreatedBackground_Memberships|error {
        string resourcePath = string `/Background_Memberships`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Background_Memberships by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBackgroundMemberships(int backgroundElementId, string userId, map<string|string[]> headers = {}, *GetBackgroundMembershipsQueries queries) returns Background_Memberships_1|error {
        string resourcePath = string `/Background_Memberships(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Background_Memberships
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBackgroundMemberships(int backgroundElementId, string userId, ModifiedBackground_Memberships payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Background_Memberships(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Background_Memberships
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBackgroundMemberships(int backgroundElementId, string userId, DeleteBackgroundMembershipsHeaders headers = {}) returns error? {
        string resourcePath = string `/Background_Memberships(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Background_Documents
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBackgroundDocumentss(map<string|string[]> headers = {}, *ListBackgroundDocumentssQueries queries) returns Wrapper_8|error {
        string resourcePath = string `/Background_Documents`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Background_Documents
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBackgroundDocuments(Background_Documents payload, map<string|string[]> headers = {}) returns CreatedBackground_Documents|error {
        string resourcePath = string `/Background_Documents`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Background_Documents by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBackgroundDocuments(int backgroundElementId, string userId, map<string|string[]> headers = {}, *GetBackgroundDocumentsQueries queries) returns Background_Documents_1|error {
        string resourcePath = string `/Background_Documents(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Background_Documents
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBackgroundDocuments(int backgroundElementId, string userId, ModifiedBackground_Documents payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Background_Documents(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Background_Documents
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBackgroundDocuments(int backgroundElementId, string userId, DeleteBackgroundDocumentsHeaders headers = {}) returns error? {
        string resourcePath = string `/Background_Documents(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Background_FuncExperience
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBackgroundFuncExperiences(map<string|string[]> headers = {}, *ListBackgroundFuncExperiencesQueries queries) returns Wrapper_9|error {
        string resourcePath = string `/Background_FuncExperience`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Background_FuncExperience
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBackgroundFuncExperience(Background_FuncExperience payload, map<string|string[]> headers = {}) returns CreatedBackground_FuncExperience|error {
        string resourcePath = string `/Background_FuncExperience`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Background_FuncExperience by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBackgroundFuncExperience(int backgroundElementId, string userId, map<string|string[]> headers = {}, *GetBackgroundFuncExperienceQueries queries) returns Background_FuncExperience_1|error {
        string resourcePath = string `/Background_FuncExperience(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Background_FuncExperience
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBackgroundFuncExperience(int backgroundElementId, string userId, ModifiedBackground_FuncExperience payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Background_FuncExperience(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Background_FuncExperience
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBackgroundFuncExperience(int backgroundElementId, string userId, DeleteBackgroundFuncExperienceHeaders headers = {}) returns error? {
        string resourcePath = string `/Background_FuncExperience(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Background_TalentPool
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBackgroundTalentPools(map<string|string[]> headers = {}, *ListBackgroundTalentPoolsQueries queries) returns Wrapper_10|error {
        string resourcePath = string `/Background_TalentPool`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Background_TalentPool
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBackgroundTalentPool(Background_TalentPool payload, map<string|string[]> headers = {}) returns CreatedBackground_TalentPool|error {
        string resourcePath = string `/Background_TalentPool`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Background_TalentPool by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBackgroundTalentPool(int backgroundElementId, string userId, map<string|string[]> headers = {}, *GetBackgroundTalentPoolQueries queries) returns Background_TalentPool_1|error {
        string resourcePath = string `/Background_TalentPool(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Background_TalentPool
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBackgroundTalentPool(int backgroundElementId, string userId, ModifiedBackground_TalentPool payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Background_TalentPool(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Background_TalentPool
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBackgroundTalentPool(int backgroundElementId, string userId, DeleteBackgroundTalentPoolHeaders headers = {}) returns error? {
        string resourcePath = string `/Background_TalentPool(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from UserBadges
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listUserBadgess(map<string|string[]> headers = {}, *ListUserBadgessQueries queries) returns Wrapper_11|error {
        string resourcePath = string `/UserBadges`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to UserBadges
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createUserBadges(UserBadges payload, map<string|string[]> headers = {}) returns CreatedUserBadges|error {
        string resourcePath = string `/UserBadges`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from UserBadges by key
    #
    # + badgeInstanceId - key: badgeInstanceId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getUserBadges(int:Signed32 badgeInstanceId, string userId, map<string|string[]> headers = {}, *GetUserBadgesQueries queries) returns UserBadges_1|error {
        string resourcePath = string `/UserBadges(badgeInstanceId=${getEncodedUri(badgeInstanceId)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Delete entity from UserBadges
    #
    # + badgeInstanceId - key: badgeInstanceId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteUserBadges(int:Signed32 badgeInstanceId, string userId, DeleteUserBadgesHeaders headers = {}) returns error? {
        string resourcePath = string `/UserBadges(badgeInstanceId=${getEncodedUri(badgeInstanceId)},userId='${getEncodedUri(userId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Background_Googledocs
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBackgroundGoogledocss(map<string|string[]> headers = {}, *ListBackgroundGoogledocssQueries queries) returns Wrapper_12|error {
        string resourcePath = string `/Background_Googledocs`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Background_Googledocs
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBackgroundGoogledocs(Background_Googledocs payload, map<string|string[]> headers = {}) returns CreatedBackground_Googledocs|error {
        string resourcePath = string `/Background_Googledocs`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Background_Googledocs by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBackgroundGoogledocs(int backgroundElementId, string userId, map<string|string[]> headers = {}, *GetBackgroundGoogledocsQueries queries) returns Background_Googledocs_1|error {
        string resourcePath = string `/Background_Googledocs(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Background_Googledocs
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBackgroundGoogledocs(int backgroundElementId, string userId, ModifiedBackground_Googledocs payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Background_Googledocs(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Background_Googledocs
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBackgroundGoogledocs(int backgroundElementId, string userId, DeleteBackgroundGoogledocsHeaders headers = {}) returns error? {
        string resourcePath = string `/Background_Googledocs(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Background_Awards
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBackgroundAwardss(map<string|string[]> headers = {}, *ListBackgroundAwardssQueries queries) returns Wrapper_13|error {
        string resourcePath = string `/Background_Awards`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Background_Awards
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBackgroundAwards(Background_Awards payload, map<string|string[]> headers = {}) returns CreatedBackground_Awards|error {
        string resourcePath = string `/Background_Awards`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Background_Awards by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBackgroundAwards(int backgroundElementId, string userId, map<string|string[]> headers = {}, *GetBackgroundAwardsQueries queries) returns Background_Awards_1|error {
        string resourcePath = string `/Background_Awards(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Background_Awards
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBackgroundAwards(int backgroundElementId, string userId, ModifiedBackground_Awards payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Background_Awards(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Background_Awards
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBackgroundAwards(int backgroundElementId, string userId, DeleteBackgroundAwardsHeaders headers = {}) returns error? {
        string resourcePath = string `/Background_Awards(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Background_Education
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBackgroundEducations(map<string|string[]> headers = {}, *ListBackgroundEducationsQueries queries) returns Wrapper_14|error {
        string resourcePath = string `/Background_Education`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Background_Education
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBackgroundEducation(Background_Education payload, map<string|string[]> headers = {}) returns CreatedBackground_Education|error {
        string resourcePath = string `/Background_Education`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Background_Education by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBackgroundEducation(int backgroundElementId, string userId, map<string|string[]> headers = {}, *GetBackgroundEducationQueries queries) returns Background_Education_1|error {
        string resourcePath = string `/Background_Education(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Background_Education
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBackgroundEducation(int backgroundElementId, string userId, ModifiedBackground_Education payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Background_Education(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Background_Education
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBackgroundEducation(int backgroundElementId, string userId, DeleteBackgroundEducationHeaders headers = {}) returns error? {
        string resourcePath = string `/Background_Education(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Background_Mobility
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBackgroundMobilities(map<string|string[]> headers = {}, *ListBackgroundMobilitiesQueries queries) returns Wrapper_15|error {
        string resourcePath = string `/Background_Mobility`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Background_Mobility
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBackgroundMobility(Background_Mobility payload, map<string|string[]> headers = {}) returns CreatedBackground_Mobility|error {
        string resourcePath = string `/Background_Mobility`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Background_Mobility by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBackgroundMobility(int backgroundElementId, string userId, map<string|string[]> headers = {}, *GetBackgroundMobilityQueries queries) returns Background_Mobility_1|error {
        string resourcePath = string `/Background_Mobility(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Background_Mobility
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBackgroundMobility(int backgroundElementId, string userId, ModifiedBackground_Mobility payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Background_Mobility(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Background_Mobility
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBackgroundMobility(int backgroundElementId, string userId, DeleteBackgroundMobilityHeaders headers = {}) returns error? {
        string resourcePath = string `/Background_Mobility(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Background_VarPayEmpHistData
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBackgroundVarPayEmpHistData(map<string|string[]> headers = {}, *ListBackgroundVarPayEmpHistDataQueries queries) returns Wrapper_16|error {
        string resourcePath = string `/Background_VarPayEmpHistData`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Background_VarPayEmpHistData
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBackgroundVarPayEmpHistData(Background_VarPayEmpHistData payload, map<string|string[]> headers = {}) returns CreatedBackground_VarPayEmpHistData|error {
        string resourcePath = string `/Background_VarPayEmpHistData`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Background_VarPayEmpHistData by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBackgroundVarPayEmpHistData(int backgroundElementId, map<string|string[]> headers = {}, *GetBackgroundVarPayEmpHistDataQueries queries) returns Background_VarPayEmpHistData_1|error {
        string resourcePath = string `/Background_VarPayEmpHistData(${getEncodedUri(backgroundElementId)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Background_VarPayEmpHistData
    #
    # + backgroundElementId - key: backgroundElementId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBackgroundVarPayEmpHistData(int backgroundElementId, ModifiedBackground_VarPayEmpHistData payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Background_VarPayEmpHistData(${getEncodedUri(backgroundElementId)})`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Background_VarPayEmpHistData
    #
    # + backgroundElementId - key: backgroundElementId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBackgroundVarPayEmpHistData(int backgroundElementId, DeleteBackgroundVarPayEmpHistDataHeaders headers = {}) returns error? {
        string resourcePath = string `/Background_VarPayEmpHistData(${getEncodedUri(backgroundElementId)})`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Background_InsideWorkExperience
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBackgroundInsideWorkExperiences(map<string|string[]> headers = {}, *ListBackgroundInsideWorkExperiencesQueries queries) returns Wrapper_17|error {
        string resourcePath = string `/Background_InsideWorkExperience`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Background_InsideWorkExperience
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBackgroundInsideWorkExperience(Background_InsideWorkExperience payload, map<string|string[]> headers = {}) returns CreatedBackground_InsideWorkExperience|error {
        string resourcePath = string `/Background_InsideWorkExperience`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Background_InsideWorkExperience by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBackgroundInsideWorkExperience(int backgroundElementId, string userId, map<string|string[]> headers = {}, *GetBackgroundInsideWorkExperienceQueries queries) returns Background_InsideWorkExperience_1|error {
        string resourcePath = string `/Background_InsideWorkExperience(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Background_InsideWorkExperience
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBackgroundInsideWorkExperience(int backgroundElementId, string userId, ModifiedBackground_InsideWorkExperience payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Background_InsideWorkExperience(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Background_InsideWorkExperience
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBackgroundInsideWorkExperience(int backgroundElementId, string userId, DeleteBackgroundInsideWorkExperienceHeaders headers = {}) returns error? {
        string resourcePath = string `/Background_InsideWorkExperience(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Background_PreferredNextMove
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBackgroundPreferredNextMoves(map<string|string[]> headers = {}, *ListBackgroundPreferredNextMovesQueries queries) returns Wrapper_18|error {
        string resourcePath = string `/Background_PreferredNextMove`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Background_PreferredNextMove
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBackgroundPreferredNextMove(Background_PreferredNextMove payload, map<string|string[]> headers = {}) returns CreatedBackground_PreferredNextMove|error {
        string resourcePath = string `/Background_PreferredNextMove`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Background_PreferredNextMove by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBackgroundPreferredNextMove(int backgroundElementId, string userId, map<string|string[]> headers = {}, *GetBackgroundPreferredNextMoveQueries queries) returns Background_PreferredNextMove_1|error {
        string resourcePath = string `/Background_PreferredNextMove(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Background_PreferredNextMove
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBackgroundPreferredNextMove(int backgroundElementId, string userId, ModifiedBackground_PreferredNextMove payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Background_PreferredNextMove(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Background_PreferredNextMove
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBackgroundPreferredNextMove(int backgroundElementId, string userId, DeleteBackgroundPreferredNextMoveHeaders headers = {}) returns error? {
        string resourcePath = string `/Background_PreferredNextMove(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from BadgeTemplates
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBadgeTemplatess(map<string|string[]> headers = {}, *ListBadgeTemplatessQueries queries) returns Wrapper_19|error {
        string resourcePath = string `/BadgeTemplates`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from BadgeTemplates by key
    #
    # + badgeId - key: badgeId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBadgeTemplates(int:Signed32 badgeId, map<string|string[]> headers = {}, *GetBadgeTemplatesQueries queries) returns BadgeTemplates_1|error {
        string resourcePath = string `/BadgeTemplates(${getEncodedUri(badgeId)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from EPPublicProfile
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEPPublicProfiles(map<string|string[]> headers = {}, *ListEPPublicProfilesQueries queries) returns Wrapper_20|error {
        string resourcePath = string `/EPPublicProfile`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to EPPublicProfile
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createEPPublicProfile(EPPublicProfile payload, map<string|string[]> headers = {}) returns CreatedEPPublicProfile|error {
        string resourcePath = string `/EPPublicProfile`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from EPPublicProfile by key
    #
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEPPublicProfile(string userId, map<string|string[]> headers = {}, *GetEPPublicProfileQueries queries) returns EPPublicProfile_1|error {
        string resourcePath = string `/EPPublicProfile('${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in EPPublicProfile
    #
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateEPPublicProfile(string userId, ModifiedEPPublicProfile payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/EPPublicProfile('${getEncodedUri(userId)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from EPPublicProfile
    #
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteEPPublicProfile(string userId, DeleteEPPublicProfileHeaders headers = {}) returns error? {
        string resourcePath = string `/EPPublicProfile('${getEncodedUri(userId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Background_Languages
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBackgroundLanguagess(map<string|string[]> headers = {}, *ListBackgroundLanguagessQueries queries) returns Wrapper_21|error {
        string resourcePath = string `/Background_Languages`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Background_Languages
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBackgroundLanguages(Background_Languages payload, map<string|string[]> headers = {}) returns CreatedBackground_Languages|error {
        string resourcePath = string `/Background_Languages`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Background_Languages by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBackgroundLanguages(int backgroundElementId, string userId, map<string|string[]> headers = {}, *GetBackgroundLanguagesQueries queries) returns Background_Languages_1|error {
        string resourcePath = string `/Background_Languages(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Background_Languages
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBackgroundLanguages(int backgroundElementId, string userId, ModifiedBackground_Languages payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Background_Languages(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Background_Languages
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBackgroundLanguages(int backgroundElementId, string userId, DeleteBackgroundLanguagesHeaders headers = {}) returns error? {
        string resourcePath = string `/Background_Languages(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Background_SysScoreCardDevelopmentObjectivesPortlet
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBackgroundSysScoreCardDevelopmentObjectivesPortlets(map<string|string[]> headers = {}, *ListBackgroundSysScoreCardDevelopmentObjectivesPortletsQueries queries) returns Wrapper_22|error {
        string resourcePath = string `/Background_SysScoreCardDevelopmentObjectivesPortlet`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Background_SysScoreCardDevelopmentObjectivesPortlet
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBackgroundSysScoreCardDevelopmentObjectivesPortlet(Background_SysScoreCardDevelopmentObjectivesPortlet payload, map<string|string[]> headers = {}) returns CreatedBackground_SysScoreCardDevelopmentObjectivesPortlet|error {
        string resourcePath = string `/Background_SysScoreCardDevelopmentObjectivesPortlet`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Background_SysScoreCardDevelopmentObjectivesPortlet by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBackgroundSysScoreCardDevelopmentObjectivesPortlet(int backgroundElementId, string userId, map<string|string[]> headers = {}, *GetBackgroundSysScoreCardDevelopmentObjectivesPortletQueries queries) returns Background_SysScoreCardDevelopmentObjectivesPortlet_1|error {
        string resourcePath = string `/Background_SysScoreCardDevelopmentObjectivesPortlet(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Background_SysScoreCardDevelopmentObjectivesPortlet
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBackgroundSysScoreCardDevelopmentObjectivesPortlet(int backgroundElementId, string userId, ModifiedBackground_SysScoreCardDevelopmentObjectivesPortlet payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Background_SysScoreCardDevelopmentObjectivesPortlet(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Background_SysScoreCardDevelopmentObjectivesPortlet
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBackgroundSysScoreCardDevelopmentObjectivesPortlet(int backgroundElementId, string userId, DeleteBackgroundSysScoreCardDevelopmentObjectivesPortletHeaders headers = {}) returns error? {
        string resourcePath = string `/Background_SysScoreCardDevelopmentObjectivesPortlet(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Background_TalentPoolcorp
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBackgroundTalentPoolcorps(map<string|string[]> headers = {}, *ListBackgroundTalentPoolcorpsQueries queries) returns Wrapper_23|error {
        string resourcePath = string `/Background_TalentPoolcorp`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Background_TalentPoolcorp
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBackgroundTalentPoolcorp(Background_TalentPoolcorp payload, map<string|string[]> headers = {}) returns CreatedBackground_TalentPoolcorp|error {
        string resourcePath = string `/Background_TalentPoolcorp`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Background_TalentPoolcorp by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBackgroundTalentPoolcorp(int backgroundElementId, string userId, map<string|string[]> headers = {}, *GetBackgroundTalentPoolcorpQueries queries) returns Background_TalentPoolcorp_1|error {
        string resourcePath = string `/Background_TalentPoolcorp(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Background_TalentPoolcorp
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBackgroundTalentPoolcorp(int backgroundElementId, string userId, ModifiedBackground_TalentPoolcorp payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Background_TalentPoolcorp(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Background_TalentPoolcorp
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBackgroundTalentPoolcorp(int backgroundElementId, string userId, DeleteBackgroundTalentPoolcorpHeaders headers = {}) returns error? {
        string resourcePath = string `/Background_TalentPoolcorp(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from EPCustomBackgroundPortlet
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEPCustomBackgroundPortlets(map<string|string[]> headers = {}, *ListEPCustomBackgroundPortletsQueries queries) returns Wrapper_24|error {
        string resourcePath = string `/EPCustomBackgroundPortlet`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from EPCustomBackgroundPortlet by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEPCustomBackgroundPortlet(string backgroundElementId, map<string|string[]> headers = {}, *GetEPCustomBackgroundPortletQueries queries) returns EPCustomBackgroundPortlet_1|error {
        string resourcePath = string `/EPCustomBackgroundPortlet('${getEncodedUri(backgroundElementId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from Background_SpecialAssign
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBackgroundSpecialAssigns(map<string|string[]> headers = {}, *ListBackgroundSpecialAssignsQueries queries) returns Wrapper_25|error {
        string resourcePath = string `/Background_SpecialAssign`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Background_SpecialAssign
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBackgroundSpecialAssign(Background_SpecialAssign payload, map<string|string[]> headers = {}) returns CreatedBackground_SpecialAssign|error {
        string resourcePath = string `/Background_SpecialAssign`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Background_SpecialAssign by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBackgroundSpecialAssign(int backgroundElementId, string userId, map<string|string[]> headers = {}, *GetBackgroundSpecialAssignQueries queries) returns Background_SpecialAssign_1|error {
        string resourcePath = string `/Background_SpecialAssign(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Background_SpecialAssign
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBackgroundSpecialAssign(int backgroundElementId, string userId, ModifiedBackground_SpecialAssign payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Background_SpecialAssign(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Background_SpecialAssign
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBackgroundSpecialAssign(int backgroundElementId, string userId, DeleteBackgroundSpecialAssignHeaders headers = {}) returns error? {
        string resourcePath = string `/Background_SpecialAssign(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Background_Certificates
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBackgroundCertificatess(map<string|string[]> headers = {}, *ListBackgroundCertificatessQueries queries) returns Wrapper_26|error {
        string resourcePath = string `/Background_Certificates`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Background_Certificates
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBackgroundCertificates(Background_Certificates payload, map<string|string[]> headers = {}) returns CreatedBackground_Certificates|error {
        string resourcePath = string `/Background_Certificates`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Background_Certificates by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBackgroundCertificates(int backgroundElementId, string userId, map<string|string[]> headers = {}, *GetBackgroundCertificatesQueries queries) returns Background_Certificates_1|error {
        string resourcePath = string `/Background_Certificates(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Background_Certificates
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBackgroundCertificates(int backgroundElementId, string userId, ModifiedBackground_Certificates payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Background_Certificates(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Background_Certificates
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBackgroundCertificates(int backgroundElementId, string userId, DeleteBackgroundCertificatesHeaders headers = {}) returns error? {
        string resourcePath = string `/Background_Certificates(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Background_VarPayEmpHistDataECSource
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBackgroundVarPayEmpHistDataECSources(map<string|string[]> headers = {}, *ListBackgroundVarPayEmpHistDataECSourcesQueries queries) returns Wrapper_27|error {
        string resourcePath = string `/Background_VarPayEmpHistDataECSource`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Background_VarPayEmpHistDataECSource
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBackgroundVarPayEmpHistDataECSource(Background_VarPayEmpHistDataECSource payload, map<string|string[]> headers = {}) returns CreatedBackground_VarPayEmpHistDataECSource|error {
        string resourcePath = string `/Background_VarPayEmpHistDataECSource`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Background_VarPayEmpHistDataECSource by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBackgroundVarPayEmpHistDataECSource(int backgroundElementId, map<string|string[]> headers = {}, *GetBackgroundVarPayEmpHistDataECSourceQueries queries) returns Background_VarPayEmpHistDataECSource_1|error {
        string resourcePath = string `/Background_VarPayEmpHistDataECSource(${getEncodedUri(backgroundElementId)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Background_VarPayEmpHistDataECSource
    #
    # + backgroundElementId - key: backgroundElementId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBackgroundVarPayEmpHistDataECSource(int backgroundElementId, ModifiedBackground_VarPayEmpHistDataECSource payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Background_VarPayEmpHistDataECSource(${getEncodedUri(backgroundElementId)})`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Background_VarPayEmpHistDataECSource
    #
    # + backgroundElementId - key: backgroundElementId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBackgroundVarPayEmpHistDataECSource(int backgroundElementId, DeleteBackgroundVarPayEmpHistDataECSourceHeaders headers = {}) returns error? {
        string resourcePath = string `/Background_VarPayEmpHistDataECSource(${getEncodedUri(backgroundElementId)})`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Background_LeadExperience
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBackgroundLeadExperiences(map<string|string[]> headers = {}, *ListBackgroundLeadExperiencesQueries queries) returns Wrapper_28|error {
        string resourcePath = string `/Background_LeadExperience`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Background_LeadExperience
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBackgroundLeadExperience(Background_LeadExperience payload, map<string|string[]> headers = {}) returns CreatedBackground_LeadExperience|error {
        string resourcePath = string `/Background_LeadExperience`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Background_LeadExperience by key
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBackgroundLeadExperience(int backgroundElementId, string userId, map<string|string[]> headers = {}, *GetBackgroundLeadExperienceQueries queries) returns Background_LeadExperience_1|error {
        string resourcePath = string `/Background_LeadExperience(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Background_LeadExperience
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateBackgroundLeadExperience(int backgroundElementId, string userId, ModifiedBackground_LeadExperience payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Background_LeadExperience(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Background_LeadExperience
    #
    # + backgroundElementId - key: backgroundElementId
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteBackgroundLeadExperience(int backgroundElementId, string userId, DeleteBackgroundLeadExperienceHeaders headers = {}) returns error? {
        string resourcePath = string `/Background_LeadExperience(backgroundElementId=${getEncodedUri(backgroundElementId)},userId='${getEncodedUri(userId)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from TrendData_SysOverallObjective
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listTrendDataSysOverallObjectives(map<string|string[]> headers = {}, *ListTrendDataSysOverallObjectivesQueries queries) returns Wrapper_29|error {
        string resourcePath = string `/TrendData_SysOverallObjective`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to TrendData_SysOverallObjective
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createTrendDataSysOverallObjective(TrendData_SysOverallObjective payload, map<string|string[]> headers = {}) returns CreatedTrendData_SysOverallObjective|error {
        string resourcePath = string `/TrendData_SysOverallObjective`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from TrendData_SysOverallObjective by key
    #
    # + id - key: id
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getTrendDataSysOverallObjective(int id, map<string|string[]> headers = {}, *GetTrendDataSysOverallObjectiveQueries queries) returns TrendData_SysOverallObjective_1|error {
        string resourcePath = string `/TrendData_SysOverallObjective(${getEncodedUri(id)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in TrendData_SysOverallObjective
    #
    # + id - key: id
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateTrendDataSysOverallObjective(int id, ModifiedTrendData_SysOverallObjective payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/TrendData_SysOverallObjective(${getEncodedUri(id)})`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from TrendData_SysOverallObjective
    #
    # + id - key: id
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteTrendDataSysOverallObjective(int id, DeleteTrendDataSysOverallObjectiveHeaders headers = {}) returns error? {
        string resourcePath = string `/TrendData_SysOverallObjective(${getEncodedUri(id)})`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from TrendData_SysOverallCompetency
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listTrendDataSysOverallCompetencies(map<string|string[]> headers = {}, *ListTrendDataSysOverallCompetenciesQueries queries) returns Wrapper_30|error {
        string resourcePath = string `/TrendData_SysOverallCompetency`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to TrendData_SysOverallCompetency
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createTrendDataSysOverallCompetency(TrendData_SysOverallCompetency payload, map<string|string[]> headers = {}) returns CreatedTrendData_SysOverallCompetency|error {
        string resourcePath = string `/TrendData_SysOverallCompetency`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from TrendData_SysOverallCompetency by key
    #
    # + id - key: id
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getTrendDataSysOverallCompetency(int id, map<string|string[]> headers = {}, *GetTrendDataSysOverallCompetencyQueries queries) returns TrendData_SysOverallCompetency_1|error {
        string resourcePath = string `/TrendData_SysOverallCompetency(${getEncodedUri(id)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in TrendData_SysOverallCompetency
    #
    # + id - key: id
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateTrendDataSysOverallCompetency(int id, ModifiedTrendData_SysOverallCompetency payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/TrendData_SysOverallCompetency(${getEncodedUri(id)})`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from TrendData_SysOverallCompetency
    #
    # + id - key: id
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteTrendDataSysOverallCompetency(int id, DeleteTrendDataSysOverallCompetencyHeaders headers = {}) returns error? {
        string resourcePath = string `/TrendData_SysOverallCompetency(${getEncodedUri(id)})`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from TrendData_SysOverallPotential
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listTrendDataSysOverallPotentials(map<string|string[]> headers = {}, *ListTrendDataSysOverallPotentialsQueries queries) returns Wrapper_31|error {
        string resourcePath = string `/TrendData_SysOverallPotential`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to TrendData_SysOverallPotential
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createTrendDataSysOverallPotential(TrendData_SysOverallPotential payload, map<string|string[]> headers = {}) returns CreatedTrendData_SysOverallPotential|error {
        string resourcePath = string `/TrendData_SysOverallPotential`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from TrendData_SysOverallPotential by key
    #
    # + id - key: id
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getTrendDataSysOverallPotential(int id, map<string|string[]> headers = {}, *GetTrendDataSysOverallPotentialQueries queries) returns TrendData_SysOverallPotential_1|error {
        string resourcePath = string `/TrendData_SysOverallPotential(${getEncodedUri(id)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in TrendData_SysOverallPotential
    #
    # + id - key: id
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateTrendDataSysOverallPotential(int id, ModifiedTrendData_SysOverallPotential payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/TrendData_SysOverallPotential(${getEncodedUri(id)})`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from TrendData_SysOverallPotential
    #
    # + id - key: id
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteTrendDataSysOverallPotential(int id, DeleteTrendDataSysOverallPotentialHeaders headers = {}) returns error? {
        string resourcePath = string `/TrendData_SysOverallPotential(${getEncodedUri(id)})`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from TrendData_SysOverallPerformance
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listTrendDataSysOverallPerformances(map<string|string[]> headers = {}, *ListTrendDataSysOverallPerformancesQueries queries) returns Wrapper_32|error {
        string resourcePath = string `/TrendData_SysOverallPerformance`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to TrendData_SysOverallPerformance
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createTrendDataSysOverallPerformance(TrendData_SysOverallPerformance payload, map<string|string[]> headers = {}) returns CreatedTrendData_SysOverallPerformance|error {
        string resourcePath = string `/TrendData_SysOverallPerformance`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from TrendData_SysOverallPerformance by key
    #
    # + id - key: id
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getTrendDataSysOverallPerformance(int id, map<string|string[]> headers = {}, *GetTrendDataSysOverallPerformanceQueries queries) returns TrendData_SysOverallPerformance_1|error {
        string resourcePath = string `/TrendData_SysOverallPerformance(${getEncodedUri(id)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in TrendData_SysOverallPerformance
    #
    # + id - key: id
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateTrendDataSysOverallPerformance(int id, ModifiedTrendData_SysOverallPerformance payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/TrendData_SysOverallPerformance(${getEncodedUri(id)})`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from TrendData_SysOverallPerformance
    #
    # + id - key: id
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteTrendDataSysOverallPerformance(int id, DeleteTrendDataSysOverallPerformanceHeaders headers = {}) returns error? {
        string resourcePath = string `/TrendData_SysOverallPerformance(${getEncodedUri(id)})`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from TrendData_SysOverallCustom1
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listTrendDataSysOverallCustom1s(map<string|string[]> headers = {}, *ListTrendDataSysOverallCustom1sQueries queries) returns Wrapper_33|error {
        string resourcePath = string `/TrendData_SysOverallCustom1`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to TrendData_SysOverallCustom1
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createTrendDataSysOverallCustom1(TrendData_SysOverallCustom1 payload, map<string|string[]> headers = {}) returns CreatedTrendData_SysOverallCustom1|error {
        string resourcePath = string `/TrendData_SysOverallCustom1`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from TrendData_SysOverallCustom1 by key
    #
    # + id - key: id
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getTrendDataSysOverallCustom1(int id, map<string|string[]> headers = {}, *GetTrendDataSysOverallCustom1Queries queries) returns TrendData_SysOverallCustom1_1|error {
        string resourcePath = string `/TrendData_SysOverallCustom1(${getEncodedUri(id)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in TrendData_SysOverallCustom1
    #
    # + id - key: id
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateTrendDataSysOverallCustom1(int id, ModifiedTrendData_SysOverallCustom1 payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/TrendData_SysOverallCustom1(${getEncodedUri(id)})`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from TrendData_SysOverallCustom1
    #
    # + id - key: id
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteTrendDataSysOverallCustom1(int id, DeleteTrendDataSysOverallCustom1Headers headers = {}) returns error? {
        string resourcePath = string `/TrendData_SysOverallCustom1(${getEncodedUri(id)})`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from TrendData_SysOverallCustom2
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listTrendDataSysOverallCustom2s(map<string|string[]> headers = {}, *ListTrendDataSysOverallCustom2sQueries queries) returns Wrapper_34|error {
        string resourcePath = string `/TrendData_SysOverallCustom2`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to TrendData_SysOverallCustom2
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createTrendDataSysOverallCustom2(TrendData_SysOverallCustom2 payload, map<string|string[]> headers = {}) returns CreatedTrendData_SysOverallCustom2|error {
        string resourcePath = string `/TrendData_SysOverallCustom2`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from TrendData_SysOverallCustom2 by key
    #
    # + id - key: id
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getTrendDataSysOverallCustom2(int id, map<string|string[]> headers = {}, *GetTrendDataSysOverallCustom2Queries queries) returns TrendData_SysOverallCustom2_1|error {
        string resourcePath = string `/TrendData_SysOverallCustom2(${getEncodedUri(id)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in TrendData_SysOverallCustom2
    #
    # + id - key: id
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateTrendDataSysOverallCustom2(int id, ModifiedTrendData_SysOverallCustom2 payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/TrendData_SysOverallCustom2(${getEncodedUri(id)})`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from TrendData_SysOverallCustom2
    #
    # + id - key: id
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteTrendDataSysOverallCustom2(int id, DeleteTrendDataSysOverallCustom2Headers headers = {}) returns error? {
        string resourcePath = string `/TrendData_SysOverallCustom2(${getEncodedUri(id)})`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }
}
