// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.org).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/data.jsondata;
import ballerina/http;
import ballerinax/sap;

# You can use these APIs for maintain the information about employees position management.
#
# You can find your company's API server in [List of API Servers in SAP SuccessFactors.](https://help.sap.com/viewer/d599f15995d348a1b45ba5603e2aba9b/LATEST/en-US/af2b8d5437494b12be88fe374eba75b6.html)
public isolated client class Client {
    final sap:Client clientEp;

    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string hostname, int port = 443) returns error? {
        string serviceUrl = string `${hostname}:${port}/successfactors/odata/v2`;
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # Get entities from PositionRequisitionStatus
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPositionRequisitionStatuses(map<string|string[]> headers = {}, *ListPositionRequisitionStatusesQueries queries) returns Wrapper|error {
        string resourcePath = string `/PositionRequisitionStatus`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to PositionRequisitionStatus
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createPositionRequisitionStatus(PositionRequisitionStatus payload, map<string|string[]> headers = {}) returns CreatedPositionRequisitionStatus|error {
        string resourcePath = string `/PositionRequisitionStatus`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from PositionRequisitionStatus by key
    #
    # + code - key: code
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPositionRequisitionStatus(int code, map<string|string[]> headers = {}, *GetPositionRequisitionStatusQueries queries) returns PositionRequisitionStatus_1|error {
        string resourcePath = string `/PositionRequisitionStatus(${getEncodedUri(code)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in PositionRequisitionStatus
    #
    # + code - key: code
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updatePositionRequisitionStatus(int code, ModifiedPositionRequisitionStatus payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/PositionRequisitionStatus(${getEncodedUri(code)})`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from PositionRequisitionStatus
    #
    # + code - key: code
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deletePositionRequisitionStatus(int code, DeletePositionRequisitionStatusHeaders headers = {}) returns error? {
        string resourcePath = string `/PositionRequisitionStatus(${getEncodedUri(code)})`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from PositionMatrixRelationship
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPositionMatrixRelationships(map<string|string[]> headers = {}, *ListPositionMatrixRelationshipsQueries queries) returns Wrapper_1|error {
        string resourcePath = string `/PositionMatrixRelationship`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to PositionMatrixRelationship
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createPositionMatrixRelationship(PositionMatrixRelationship payload, map<string|string[]> headers = {}) returns CreatedPositionMatrixRelationship|error {
        string resourcePath = string `/PositionMatrixRelationship`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from PositionMatrixRelationship by key
    #
    # + Position_code - key: Position_code
    # + Position_effectiveStartDate - key: Position_effectiveStartDate
    # + matrixRelationshipType - key: matrixRelationshipType
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPositionMatrixRelationship(string Position_code, string Position_effectiveStartDate, string matrixRelationshipType, map<string|string[]> headers = {}, *GetPositionMatrixRelationshipQueries queries) returns PositionMatrixRelationship_1|error {
        string resourcePath = string `/PositionMatrixRelationship(Position_code='${getEncodedUri(Position_code)}',Position_effectiveStartDate=${getEncodedUri(Position_effectiveStartDate)},matrixRelationshipType='${getEncodedUri(matrixRelationshipType)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in PositionMatrixRelationship
    #
    # + Position_code - key: Position_code
    # + Position_effectiveStartDate - key: Position_effectiveStartDate
    # + matrixRelationshipType - key: matrixRelationshipType
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updatePositionMatrixRelationship(string Position_code, string Position_effectiveStartDate, string matrixRelationshipType, ModifiedPositionMatrixRelationship payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/PositionMatrixRelationship(Position_code='${getEncodedUri(Position_code)}',Position_effectiveStartDate=${getEncodedUri(Position_effectiveStartDate)},matrixRelationshipType='${getEncodedUri(matrixRelationshipType)}')`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from PositionMatrixRelationship
    #
    # + Position_code - key: Position_code
    # + Position_effectiveStartDate - key: Position_effectiveStartDate
    # + matrixRelationshipType - key: matrixRelationshipType
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deletePositionMatrixRelationship(string Position_code, string Position_effectiveStartDate, string matrixRelationshipType, DeletePositionMatrixRelationshipHeaders headers = {}) returns error? {
        string resourcePath = string `/PositionMatrixRelationship(Position_code='${getEncodedUri(Position_code)}',Position_effectiveStartDate=${getEncodedUri(Position_effectiveStartDate)},matrixRelationshipType='${getEncodedUri(matrixRelationshipType)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get entities from Position
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPositions(map<string|string[]> headers = {}, *ListPositionsQueries queries) returns Wrapper_2|error {
        string resourcePath = string `/Position`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to Position
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createPosition(Position payload, map<string|string[]> headers = {}) returns CreatedPosition|error {
        string resourcePath = string `/Position`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from Position by key
    #
    # + code - key: code
    # + effectiveStartDate - key: effectiveStartDate
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPosition(string code, string effectiveStartDate, map<string|string[]> headers = {}, *GetPositionQueries queries) returns Position_1|error {
        string resourcePath = string `/Position(code='${getEncodedUri(code)}',effectiveStartDate=${getEncodedUri(effectiveStartDate)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in Position
    #
    # + code - key: code
    # + effectiveStartDate - key: effectiveStartDate
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updatePosition(string code, string effectiveStartDate, ModifiedPosition payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/Position(code='${getEncodedUri(code)}',effectiveStartDate=${getEncodedUri(effectiveStartDate)})`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete entity from Position
    #
    # + code - key: code
    # + effectiveStartDate - key: effectiveStartDate
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deletePosition(string code, string effectiveStartDate, DeletePositionHeaders headers = {}) returns error? {
        string resourcePath = string `/Position(code='${getEncodedUri(code)}',effectiveStartDate=${getEncodedUri(effectiveStartDate)})`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Invoke function getPositionObjectData
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function getgetPositionObjectData(map<string|string[]> headers = {}, *GetgetPositionObjectDataQueries queries) returns Result|error {
        string resourcePath = string `/getPositionObjectData`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities for PositionRightToReturn
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPositionRightToReturns(map<string|string[]> headers = {}, *ListPositionRightToReturnsQueries queries) returns Wrapper_3|error {
        string resourcePath = string `/PositionRightToReturn`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from PositionRightToReturn by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPositionRightToReturn(string externalCode, map<string|string[]> headers = {}) returns PositionRightToReturn_1|error {
        string resourcePath = string `/PositionRightToReturn('${getEncodedUri(externalCode)}')`;
        return self.clientEp->get(resourcePath, headers);
    }
}
