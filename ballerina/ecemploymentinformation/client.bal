// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.org).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/data.jsondata;
import ballerina/http;
import ballerina/log;
import ballerinax/sap;

# You can use these APIs to access the employment related information, including job information, employment termination, and work permit.
#
# You can find your company's API server in [List of API Servers in SAP SuccessFactors.](https://help.sap.com/viewer/d599f15995d348a1b45ba5603e2aba9b/LATEST/en-US/af2b8d5437494b12be88fe374eba75b6.html)
public isolated client class Client {
    final sap:Client clientEp;

    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string hostname, int port = 443) returns error? {
        string serviceUrl = string `${hostname}:${port}/successfactors/odata/v2`;
        log:printInfo(string `Initializing SAP SuccessFactors Employee Central Client - serviceUrl: ${serviceUrl}`);
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # Get entities from EmpBeneficiary
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEmpBeneficiaries(map<string|string[]> headers = {}, *ListEmpBeneficiariesQueries queries) returns Wrapper|error {
        string resourcePath = string `/EmpBeneficiary`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from EmpBeneficiary by key
    #
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEmpBeneficiary(string userId, map<string|string[]> headers = {}, *GetEmpBeneficiaryQueries queries) returns EmpBeneficiary_1|error {
        string resourcePath = string `/EmpBeneficiary('${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from EmpEmployment
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEmpEmployments(map<string|string[]> headers = {}, *ListEmpEmploymentsQueries queries) returns Wrapper_1|error {
        string resourcePath = string `/EmpEmployment`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from EmpEmployment by key
    #
    # + personIdExternal - key: personIdExternal
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEmpEmployment(string personIdExternal, string userId, map<string|string[]> headers = {}, *GetEmpEmploymentQueries queries) returns EmpEmployment_1|error {
        string resourcePath = string `/EmpEmployment(personIdExternal='${getEncodedUri(personIdExternal)}',userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from EmpEmploymentTermination
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEmpEmploymentTerminations(map<string|string[]> headers = {}, *ListEmpEmploymentTerminationsQueries queries) returns Wrapper_2|error {
        string resourcePath = string `/EmpEmploymentTermination`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from EmpEmploymentTermination by key
    #
    # + endDate - key: endDate
    # + personIdExternal - key: personIdExternal
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEmpEmploymentTermination(string endDate, string personIdExternal, string userId, map<string|string[]> headers = {}, *GetEmpEmploymentTerminationQueries queries) returns EmpEmploymentTermination_1|error {
        string resourcePath = string `/EmpEmploymentTermination(endDate=${getEncodedUri(endDate)},personIdExternal='${getEncodedUri(personIdExternal)}',userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from EmpPensionPayout
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEmpPensionPayouts(map<string|string[]> headers = {}, *ListEmpPensionPayoutsQueries queries) returns Wrapper_3|error {
        string resourcePath = string `/EmpPensionPayout`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from EmpPensionPayout by key
    #
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEmpPensionPayout(string userId, map<string|string[]> headers = {}, *GetEmpPensionPayoutQueries queries) returns EmpPensionPayout_1|error {
        string resourcePath = string `/EmpPensionPayout('${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from EmpWorkPermit
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEmpWorkPermits(map<string|string[]> headers = {}, *ListEmpWorkPermitsQueries queries) returns Wrapper_4|error {
        string resourcePath = string `/EmpWorkPermit`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from EmpWorkPermit by key
    #
    # + country - key: country
    # + documentNumber - key: documentNumber
    # + documentType - key: documentType
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEmpWorkPermit(string country, string documentNumber, string documentType, string userId, map<string|string[]> headers = {}, *GetEmpWorkPermitQueries queries) returns EmpWorkPermit_1|error {
        string resourcePath = string `/EmpWorkPermit(country='${getEncodedUri(country)}',documentNumber='${getEncodedUri(documentNumber)}',documentType='${getEncodedUri(documentType)}',userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from EmpJobRelationships
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEmpJobRelationshipss(map<string|string[]> headers = {}, *ListEmpJobRelationshipssQueries queries) returns Wrapper_5|error {
        string resourcePath = string `/EmpJobRelationships`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from EmpJobRelationships by key
    #
    # + relationshipType - key: relationshipType
    # + startDate - key: startDate
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEmpJobRelationships(string relationshipType, string startDate, string userId, map<string|string[]> headers = {}, *GetEmpJobRelationshipsQueries queries) returns EmpJobRelationships_1|error {
        string resourcePath = string `/EmpJobRelationships(relationshipType='${getEncodedUri(relationshipType)}',startDate=${getEncodedUri(startDate)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from EmpJob
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEmpJobs(map<string|string[]> headers = {}, *ListEmpJobsQueries queries) returns Wrapper_6|error {
        string resourcePath = string `/EmpJob`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from EmpJob by key
    #
    # + seqNumber - key: seqNumber
    # + startDate - key: startDate
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEmpJob(int seqNumber, string startDate, string userId, map<string|string[]> headers = {}, *GetEmpJobQueries queries) returns EmpJob_1|error {
        string resourcePath = string `/EmpJob(seqNumber=${getEncodedUri(seqNumber)},startDate=${getEncodedUri(startDate)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from PersonEmpTerminationInfo
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPersonEmpTerminationInfos(map<string|string[]> headers = {}, *ListPersonEmpTerminationInfosQueries queries) returns Wrapper_7|error {
        string resourcePath = string `/PersonEmpTerminationInfo`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from PersonEmpTerminationInfo by key
    #
    # + personIdExternal - key: personIdExternal
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPersonEmpTerminationInfo(string personIdExternal, map<string|string[]> headers = {}, *GetPersonEmpTerminationInfoQueries queries) returns PersonEmpTerminationInfo_1|error {
        string resourcePath = string `/PersonEmpTerminationInfo('${getEncodedUri(personIdExternal)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from HireDateChange
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listHireDateChanges(map<string|string[]> headers = {}, *ListHireDateChangesQueries queries) returns Wrapper_8|error {
        string resourcePath = string `/HireDateChange`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to HireDateChange
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createHireDateChange(HireDateChange payload, map<string|string[]> headers = {}) returns CreatedHireDateChange|error {
        string resourcePath = string `/HireDateChange`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from HireDateChange by key
    #
    # + code - key: code
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getHireDateChange(string code, map<string|string[]> headers = {}, *GetHireDateChangeQueries queries) returns HireDateChange_1|error {
        string resourcePath = string `/HireDateChange('${getEncodedUri(code)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Delete entity from HireDateChange
    #
    # + code - key: code
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteHireDateChange(string code, DeleteHireDateChangeHeaders headers = {}) returns error? {
        string resourcePath = string `/HireDateChange('${getEncodedUri(code)}')`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }
}
