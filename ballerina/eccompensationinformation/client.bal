// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.org).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;

# You can use APIs to access the compensation information of an employee, including salary, recurring bonuses and non-recurring compensation information. You can use these APIs to create non-recurring deductions in a payment.
# 
#  You can find your company's API server in [List of API Servers in SAP SuccessFactors.](https://help.sap.com/viewer/d599f15995d348a1b45ba5603e2aba9b/LATEST/en-US/af2b8d5437494b12be88fe374eba75b6.html)
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://sandbox.api.sap.com/successfactors/odata/v2") returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # Get entities from OneTimeDeduction
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listOneTimeDeductions(map<string|string[]> headers = {}, *ListOneTimeDeductionsQueries queries) returns Wrapper|error {
        string resourcePath = string `/OneTimeDeduction`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from OneTimeDeduction by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getOneTimeDeduction(int externalCode, map<string|string[]> headers = {}, *GetOneTimeDeductionQueries queries) returns OneTimeDeduction_1|error {
        string resourcePath = string `/OneTimeDeduction(${getEncodedUri(externalCode)})`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from RecurringDeductionItem
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listRecurringDeductionItems(map<string|string[]> headers = {}, *ListRecurringDeductionItemsQueries queries) returns Wrapper_1|error {
        string resourcePath = string `/RecurringDeductionItem`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from RecurringDeductionItem by key
    #
    # + RecurringDeduction_effectiveStartDate - key: RecurringDeduction_effectiveStartDate
    # + RecurringDeduction_userSysId - key: RecurringDeduction_userSysId
    # + payComponentType - key: payComponentType
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getRecurringDeductionItem(string RecurringDeduction_effectiveStartDate, string RecurringDeduction_userSysId, string payComponentType, map<string|string[]> headers = {}, *GetRecurringDeductionItemQueries queries) returns RecurringDeductionItem_1|error {
        string resourcePath = string `/RecurringDeductionItem(RecurringDeduction_effectiveStartDate=${getEncodedUri(RecurringDeduction_effectiveStartDate)},RecurringDeduction_userSysId='${getEncodedUri(RecurringDeduction_userSysId)}',payComponentType='${getEncodedUri(payComponentType)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from EmpCompensationCalculated
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEmpCompensationExpandEmpCompensationCalculatedNavs(map<string|string[]> headers = {}, *ListEmpCompensationExpandEmpCompensationCalculatedNavsQueries queries) returns Wrapper_2|error {
        string resourcePath = string `/EmpCompensation?$expand=empCompensationCalculatedNav`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from EmpCompensationCalculated by key
    #
    # + seqNumber - key: seqNumber
    # + startDate - key: startDate
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEmpCompensationCalculated(int seqNumber, string startDate, string userId, map<string|string[]> headers = {}, *GetEmpCompensationCalculatedQueries queries) returns EmpCompensationCalculated_1|error {
        string resourcePath = string `/EmpCompensation(seqNumber=${getEncodedUri(seqNumber)},startDate=${getEncodedUri(startDate)},userId='${getEncodedUri(userId)}'))?$expand=empCompensationCalculatedNav`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from EmpPayCompRecurring
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEmpPayCompRecurrings(map<string|string[]> headers = {}, *ListEmpPayCompRecurringsQueries queries) returns Wrapper_3|error {
        string resourcePath = string `/EmpPayCompRecurring`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from EmpPayCompRecurring by key
    #
    # + payComponent - key: payComponent
    # + seqNumber - key: seqNumber
    # + startDate - key: startDate
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEmpPayCompRecurring(string payComponent, int seqNumber, string startDate, string userId, map<string|string[]> headers = {}, *GetEmpPayCompRecurringQueries queries) returns EmpPayCompRecurring_1|error {
        string resourcePath = string `/EmpPayCompRecurring(payComponent='${getEncodedUri(payComponent)}',seqNumber=${getEncodedUri(seqNumber)},startDate=${getEncodedUri(startDate)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from DeductionScreenId
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listDeductionScreenIds(map<string|string[]> headers = {}, *ListDeductionScreenIdsQueries queries) returns Wrapper_4|error {
        string resourcePath = string `/DeductionScreenId`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from DeductionScreenId by key
    #
    # + externalCode - key: externalCode
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getDeductionScreenId(string externalCode, map<string|string[]> headers = {}, *GetDeductionScreenIdQueries queries) returns DeductionScreenId_1|error {
        string resourcePath = string `/DeductionScreenId('${getEncodedUri(externalCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from RecurringDeduction
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listRecurringDeductions(map<string|string[]> headers = {}, *ListRecurringDeductionsQueries queries) returns Wrapper_5|error {
        string resourcePath = string `/RecurringDeduction`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from RecurringDeduction by key
    #
    # + effectiveStartDate - key: effectiveStartDate
    # + userSysId - key: userSysId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getRecurringDeduction(string effectiveStartDate, string userSysId, map<string|string[]> headers = {}, *GetRecurringDeductionQueries queries) returns RecurringDeduction_1|error {
        string resourcePath = string `/RecurringDeduction(effectiveStartDate=${getEncodedUri(effectiveStartDate)},userSysId='${getEncodedUri(userSysId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from EmpCompensation
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEmpCompensations(map<string|string[]> headers = {}, *ListEmpCompensationsQueries queries) returns Wrapper_6|error {
        string resourcePath = string `/EmpCompensation`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from EmpCompensation by key
    #
    # + startDate - key: startDate
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEmpCompensation(string startDate, string userId, map<string|string[]> headers = {}, *GetEmpCompensationQueries queries) returns EmpCompensation_1|error {
        string resourcePath = string `/EmpCompensation(startDate=${getEncodedUri(startDate)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from EmpPayCompNonRecurring
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEmpPayCompNonRecurrings(map<string|string[]> headers = {}, *ListEmpPayCompNonRecurringsQueries queries) returns Wrapper_7|error {
        string resourcePath = string `/EmpPayCompNonRecurring`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from EmpPayCompNonRecurring by key
    #
    # + payComponentCode - key: payComponentCode
    # + payDate - key: payDate
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEmpPayCompNonRecurring(string payComponentCode, string payDate, string userId, map<string|string[]> headers = {}, *GetEmpPayCompNonRecurringQueries queries) returns EmpPayCompNonRecurring_1|error {
        string resourcePath = string `/EmpPayCompNonRecurring(payComponentCode='${getEncodedUri(payComponentCode)}',payDate=${getEncodedUri(payDate)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from EmpCompensationGroupSumCalculated
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listEmpCompensationGroupSumCalculateds(map<string|string[]> headers = {}, *ListEmpCompensationGroupSumCalculatedsQueries queries) returns Wrapper_8|error {
        string resourcePath = string `/EmpCompensationGroupSumCalculated`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from EmpCompensationGroupSumCalculated by key
    #
    # + seqNumber - key: seqNumber
    # + startDate - key: startDate
    # + userId - key: userId
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getEmpCompensationGroupSumCalculated(int seqNumber, string startDate, string userId, map<string|string[]> headers = {}, *GetEmpCompensationGroupSumCalculatedQueries queries) returns EmpCompensationGroupSumCalculated_1|error {
        string resourcePath = string `/EmpCompensationGroupSumCalculated(seqNumber=${getEncodedUri(seqNumber)},startDate=${getEncodedUri(startDate)},userId='${getEncodedUri(userId)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }
}
